<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 無糖的小宇宙</title>
        <link>https://sugarless.top/posts.html</link>
        <description>所有文章 | 無糖的小宇宙</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jaded@foxmail.com (無糖)</managingEditor>
            <webMaster>jaded@foxmail.com (無糖)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 08 Sep 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://sugarless.top/posts.html" rel="self" type="application/rss+xml" /><item>
    <title>[ 置顶 ] 🚩 Github 项目 / 工具站点 / 有趣的站点</title>
    <link>https://sugarless.top/posts/mark/1.html</link>
    <pubDate>Tue, 31 Dec 2019 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/mark/1.html</guid>
    <description><![CDATA[<p>内容不定期持续更新，感谢每一位开源项目作者为全世界开发者做出的杰出贡献。本文主要分享一些我平时收集到的一些好物，东西可能比较杂乱。涵盖开源项目、免费的工具站、好用的客户端工具、优秀的付费网站和来路不明的沙雕网站。</p>
<h1 id="github-开源项目">Github 开源项目</h1>
<h2 id="功能性网站">功能性网站</h2>
<h3 id="1兰空图床">1、兰空图床</h3>
<p>使用 thinkphp + mysql 开发，界面简洁易用，支持第三方云储存和远程 FTP 存储。并且有开源的浏览器插件支持。（真香）</p>
<p>官网：<a href="https://www.lsky.pro" target="_blank" rel="noopener noreffer">https://www.lsky.pro</a></p>
<p>GitHub：<a href="https://github.com/wisp-x/lsky-pro" target="_blank" rel="noopener noreffer">https://github.com/wisp-x/lsky-pro</a></p>
<p>浏览器扩展：<a href="https://github.com/wisp-x/lsky-pro-chrome-extension" target="_blank" rel="noopener noreffer">https://github.com/wisp-x/lsky-pro-chrome-extension</a></p>
<h3 id="2基于-phphtml-的轻量级网络测试站点">2、基于 php+html 的轻量级网络测试站点</h3>
<p>HTML5 Speedtest 可用于查看下载速度、ping 速度、上传速度；很小巧方便，直接打开页面点击一下 start 就能自动检测，你本机到远程服务器的网络状况，快速得到观测数据</p>
<p>Github：<a href="https://github.com/librespeed/speedtest" target="_blank" rel="noopener noreffer">https://github.com/librespeed/speedtest</a></p>
<h3 id="3flarum-论坛">3、flarum 论坛</h3>
<p>基于 PHP Laravel 框架构建的一款优雅简洁论坛软件。发帖及跟帖回复使用 markdown 语法是一个亮点。</p>
<p>官网：<a href="https://flarum.org" target="_blank" rel="noopener noreffer">https://flarum.org</a></p>
<p>中文官网：<a href="https://flarum.org.cn" target="_blank" rel="noopener noreffer">https://flarum.org.cn</a></p>
<p>Github：<a href="https://github.com/flarum/flarum" target="_blank" rel="noopener noreffer">https://github.com/flarum/flarum</a></p>
<h2 id="命令行工具">命令行工具</h2>
<h3 id="1annie">1、annie</h3>
<p>基于 Go 开发的一款命令行视频下载器，支持的平台很多，包括 MacOS、Windows、Linux 等。目前支持 bilibili 和 youtube 的播放列表批量下载，其他网站只支持单个视频下载。</p>
<p>Github：<a href="https://github.com/iawia002/annie" target="_blank" rel="noopener noreffer">https://github.com/iawia002/annie</a></p>
<h3 id="2youtube-dl">2、youtube-dl</h3>
<p>下载 youtube 视频的神器
Github：<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener noreffer">https://github.com/ytdl-org/youtube-dl</a>
官网：<a href="http://ytdl-org.github.io/youtube-dl/" target="_blank" rel="noopener noreffer">http://ytdl-org.github.io/youtube-dl/</a></p>
<h2 id="开发工具">开发工具</h2>
<h3 id="1anotherredisdesktopmanager">1、AnotherRedisDesktopManager</h3>
<p>一个 GUI Redis 桌面管理器，兼容 Linux、Windows、Mac。更重要的是，在加载大量的键时，它不会崩溃。</p>
<p>Github：<a href="https://github.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener noreffer">https://github.com/qishibo/AnotherRedisDesktopManager</a></p>
<h3 id="2switchhosts">2、SwitchHosts</h3>
<p>SwitchHosts 是一个管理、切换多个 hosts 方案的工具。</p>
<p>Github：<a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="noopener noreffer">https://github.com/oldj/SwitchHosts</a></p>
<p>官网：<a href="https://swh.app/zh/" target="_blank" rel="noopener noreffer">https://swh.app/zh/</a></p>
<h3 id="3docsify">3、docsify</h3>
<p>docsify 可以快速帮你生成文档网站。不同于 GitBook、Hexo 的地方是它不会生成静态的 .html 文件，所有转换工作都是在运行时。如果你想要开始使用它，只需要创建一个 index.html 就可以开始编写文档并直接部署在 GitHub Pages。</p>
<p>Github：<a href="https://github.com/docsifyjs/docsify/" target="_blank" rel="noopener noreffer">https://github.com/docsifyjs/docsify/</a></p>
<p>官网：<a href="https://docsify.js.org/" target="_blank" rel="noopener noreffer">https://docsify.js.org/</a></p>
<h2 id="ui-框架">UI 框架</h2>
<h3 id="1layui">1、LayUI</h3>
<p>对非专业前端的开发人员非常友好，组件丰富，极低门槛，开箱即用。</p>
<p>官网：<a href="https://www.layui.com" target="_blank" rel="noopener noreffer">https://www.layui.com</a></p>
<p>GitHub：<a href="https://github.com/sentsin/layui" target="_blank" rel="noopener noreffer">https://github.com/sentsin/layui</a></p>
<h3 id="2vant-weapp">2、vant-weapp</h3>
<p>有赞出品的开源小程序 UI 组件库</p>
<p>官网：<a href="https://youzan.github.io/vant-weapp" target="_blank" rel="noopener noreffer">https://youzan.github.io/vant-weapp</a></p>
<p>GitHub：<a href="https://github.com/youzan/vant-weapp" target="_blank" rel="noopener noreffer">https://github.com/youzan/vant-weapp</a></p>
<h3 id="3elementui">3、ElementUI</h3>
<p>饿了么开发的基于 Vue 2.0 的桌面端组件库</p>
<p>官网：<a href="https://element.eleme.cn" target="_blank" rel="noopener noreffer">https://element.eleme.cn</a></p>
<h2 id="wordpress-主题">WordPress 主题</h2>
<h3 id="1argon-theme">1、argon-theme</h3>
<p>博客、文章向主题</p>
<p>Github：<a href="https://github.com/solstice23/argon-theme" target="_blank" rel="noopener noreffer">https://github.com/solstice23/argon-theme</a></p>
<p>Demo：<a href="https://solstice23.top/archives/746" target="_blank" rel="noopener noreffer">https://solstice23.top/archives/746</a></p>
<h3 id="2puock">2、Puock</h3>
<p>博客、文章主题</p>
<p>Github：<a href="https://github.com/Licoy/wordpress-theme-puock" target="_blank" rel="noopener noreffer">https://github.com/Licoy/wordpress-theme-puock</a></p>
<p>Demo：<a href="https://www.licoy.cn" target="_blank" rel="noopener noreffer">https://www.licoy.cn</a></p>
<h3 id="3webstack">3、WebStack</h3>
<p>网址导航主题</p>
<p>Github：<a href="https://github.com/owen0o0/WebStack" target="_blank" rel="noopener noreffer">https://github.com/owen0o0/WebStack</a></p>
<h2 id="hugo-主题">Hugo 主题</h2>
<h3 id="1doit">1、DoIt</h3>
<p>个人博客主题</p>
<p>Github：<a href="https://github.com/HEIGE-PCloud/DoIt" target="_blank" rel="noopener noreffer">https://github.com/HEIGE-PCloud/DoIt</a></p>
<p>Demo：<a href="https://hugodoit.pages.dev/zh-cn/" target="_blank" rel="noopener noreffer">https://hugodoit.pages.dev/zh-cn/</a></p>
<h3 id="2hugo-theme-meme">2、hugo-theme-meme</h3>
<p>个人博客主题</p>
<p>Github：<a href="https://github.com/reuixiy/hugo-theme-meme" target="_blank" rel="noopener noreffer">https://github.com/reuixiy/hugo-theme-meme</a></p>
<p>Demo：<a href="https://io-oi.me/" target="_blank" rel="noopener noreffer">https://io-oi.me/</a></p>
<h2 id="javascript">JavaScript</h2>
<h3 id="1introjs">1、intro.js</h3>
<p>网站页面 / 新功能 引导流程插件</p>
<p>官网：<a href="http://introjs.com" target="_blank" rel="noopener noreffer">http://introjs.com</a></p>
<p>GitHub：<a href="https://github.com/usablica/intro.js" target="_blank" rel="noopener noreffer">https://github.com/usablica/intro.js</a></p>
<h3 id="2clipboardjs">2、clipboard.js</h3>
<p>js 实现一键复制文本到剪贴板插件</p>
<p>官网：<a href="https://clipboardjs.com" target="_blank" rel="noopener noreffer">https://clipboardjs.com</a></p>
<p>GitHub：<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener noreffer">https://github.com/zenorocha/clipboard.js</a></p>
<h3 id="3viewerjs">3、viewer.js</h3>
<p>js 图片浏览插件</p>
<p>官网：<a href="https://fengyuanchen.github.io/viewerjs" target="_blank" rel="noopener noreffer">https://fengyuanchen.github.io/viewerjs</a></p>
<p>Github：<a href="https://github.com/fengyuanchen/viewerjs" target="_blank" rel="noopener noreffer">https://github.com/fengyuanchen/viewerjs</a></p>
<h3 id="4contextjs">4、context.js</h3>
<p>右键菜单插件</p>
<p>官网：<a href="http://lab.jakiestfu.com/contextjs" target="_blank" rel="noopener noreffer">http://lab.jakiestfu.com/contextjs</a></p>
<p>Github：<a href="https://github.com/jakiestfu/Context.js" target="_blank" rel="noopener noreffer">https://github.com/jakiestfu/Context.js</a></p>
<h3 id="5momentjs">5、moment.js</h3>
<p>JavaScript 日期处理类库，多语言支持</p>
<p>官网：<a href="https://momentjs.com" target="_blank" rel="noopener noreffer">https://momentjs.com</a> / <a href="http://momentjs.cn" target="_blank" rel="noopener noreffer">http://momentjs.cn</a></p>
<h3 id="6highlightjs">6、highlight.js</h3>
<p>代码高亮 / 支持 189 种编程语言 / 95 种高亮样式</p>
<p>Github：<a href="https://github.com/highlightjs/highlight.js" target="_blank" rel="noopener noreffer">https://github.com/highlightjs/highlight.js</a></p>
<p>官网：<a href="https://highlightjs.org" target="_blank" rel="noopener noreffer">https://highlightjs.org</a> / <a href="https://highlightjs.org/static/demo" target="_blank" rel="noopener noreffer">https://highlightjs.org/static/demo</a></p>
<h3 id="7pangujs">7、Pangu.js</h3>
<p>中文字和英文、数字、符号之间自动插入空格</p>
<p>Github：<a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener noreffer">https://github.com/vinta/pangu.js</a></p>
<p>官网：暂无</p>
<h2 id="m3u-直播源">M3U 直播源</h2>
<h3 id="1wtv">1、wtv</h3>
<p>解决电脑、手机看电视直播的苦恼，收集各种直播源，电视直播网站。建议配合 potplayer 使用。</p>
<p>Github：<a href="https://github.com/biancangming/wtv" target="_blank" rel="noopener noreffer">https://github.com/biancangming/wtv</a></p>
<h2 id="客户端软件">客户端软件</h2>
<h3 id="1contextmenumanager">1、ContextMenuManager</h3>
<p>一个纯粹的 Windows 右键菜单管理程序</p>
<p>Github：<a href="https://github.com/BluePointLilac/ContextMenuManager" target="_blank" rel="noopener noreffer">https://github.com/BluePointLilac/ContextMenuManager</a></p>
<p>官网：<a href="https://bluepointlilac.github.io/ContextMenuManager" target="_blank" rel="noopener noreffer">https://bluepointlilac.github.io/ContextMenuManager</a></p>
<h1 id="工具站点">工具站点</h1>
<h2 id="开发">开发</h2>
<h3 id="1requestcatchercom">1、requestcatcher.com</h3>
<p>Debug web hooks, http clients, etc.</p>
<p>Request Catcher will create a subdomain on which you can test an application. All requests sent to any path on the subdomain are forwarded to your browser in real time.</p>
<p>官网：<a href="https://requestcatcher.com" target="_blank" rel="noopener noreffer">https://requestcatcher.com</a></p>
<h3 id="2jsoncn">2、json.cn</h3>
<p>json 格式化</p>
<p>官网：<a href="http://json.cn" target="_blank" rel="noopener noreffer">http://json.cn</a></p>
<h3 id="3searchcode">3、searchcode</h3>
<p>是一个源码搜索引擎，目前支持从 Github、Bitbucket、Google Code、CodePlex、SourceForge 和 Fedora Project 平台搜索公开的源码。</p>
<p>官网：<a href="https://searchcode.com" target="_blank" rel="noopener noreffer">https://searchcode.com</a></p>
<p>设计
1、创客贴
付费网站，但提供一些免费资源，比较灵活的在线设计工具。风格比较偏向 MG 动画，可以搞出很花哨的 banner 和长图海报之类的，算是个不错的设计资源网站。</p>
<p>官网：<a href="https://www.chuangkit.com" target="_blank" rel="noopener noreffer">https://www.chuangkit.com</a></p>
<h2 id="书籍">书籍</h2>
<h3 id="1鸠摩搜索">1、鸠摩搜索</h3>
<p>鸠摩是一个电子书搜索引擎，界面简洁、内容纯净，专业而高效。</p>
<p>官网：<a href="https://www.jiumodiary.com" target="_blank" rel="noopener noreffer">https://www.jiumodiary.com</a></p>
<h3 id="2thefuture-书籍搜索">2、thefuture 书籍搜索</h3>
<p>小站，知名度不高，但试着搜索了几本书，感觉还挺好用。</p>
<p>官网：<a href="https://bks.thefuture.top" target="_blank" rel="noopener noreffer">https://bks.thefuture.top</a></p>
<h2 id="生产力">生产力</h2>
<h3 id="1gitmind-在线思维导图">1、GitMind 在线思维导图</h3>
<p><a href="https://gitmind.cn" target="_blank" rel="noopener noreffer">https://gitmind.cn</a></p>
<h2 id="图像">图像</h2>
<h3 id="1ai-人工智能图片无损放大">1、AI 人工智能图片无损放大</h3>
<p><a href="https://bigjpg.com" target="_blank" rel="noopener noreffer">https://bigjpg.com</a></p>
<h3 id="2消除图片中的背景--ai-自动抠图">2、消除图片中的背景 / AI 自动抠图</h3>
<p><a href="https://www.remove.bg/zh" target="_blank" rel="noopener noreffer">https://www.remove.bg/zh</a></p>
<h2 id="内容创作">内容创作</h2>
<h3 id="1emoji大全--emoji表情符号词典-">1、Emoji大全 | Emoji表情符号词典 📓</h3>
<p><a href="https://www.emojiall.com/zh-hans" target="_blank" rel="noopener noreffer">https://www.emojiall.com/zh-hans</a></p>
<h3 id="2deepl-翻译">2、DeepL 翻译</h3>
<p><a href="https://www.deepl.com/translator" target="_blank" rel="noopener noreffer">https://www.deepl.com/translator</a></p>
<h2 id="kms">KMS</h2>
<h3 id="1沧水-kms">1、沧水 KMS</h3>
<p><a href="https://kms.cangshui.net" target="_blank" rel="noopener noreffer">https://kms.cangshui.net</a></p>
<h3 id="2moerats-kms">2、moerats KMS</h3>
<p><a href="https://www.moerats.com/kms" target="_blank" rel="noopener noreffer">https://www.moerats.com/kms</a></p>
<h2 id="其他">其他</h2>
<h3 id="1台风路径查询">1、台风路径查询</h3>
<p><a href="http://typhoon.zjwater.gov.cn" target="_blank" rel="noopener noreffer">http://typhoon.zjwater.gov.cn</a></p>
<h3 id="2黑客模拟器">2、黑客模拟器</h3>
<p><a href="http://geektyper.com" target="_blank" rel="noopener noreffer">http://geektyper.com</a></p>
<h3 id="3世界护照大全">3、世界护照大全</h3>
<p><a href="https://www.passportindex.org/cn" target="_blank" rel="noopener noreffer">https://www.passportindex.org/cn</a></p>
<h3 id="4查无此人--ai-生成人脸">4、查无此人 / AI 生成人脸</h3>
<p><a href="https://thispersondoesnotexist.com" target="_blank" rel="noopener noreffer">https://thispersondoesnotexist.com</a></p>
<h3 id="5网页版-windows93">5、网页版 windows93</h3>
<p><a href="http://www.windows93.net" target="_blank" rel="noopener noreffer">http://www.windows93.net</a></p>
<h3 id="6假装系统在升级">6、假装系统在升级</h3>
<p><a href="http://fakeupdate.net" target="_blank" rel="noopener noreffer">http://fakeupdate.net</a></p>
<h2 id="好像有那么点用">好像有那么点用</h2>
<h3 id="1全历史">1、全历史</h3>
<p><a href="https://www.allhistory.com" target="_blank" rel="noopener noreffer">https://www.allhistory.com</a></p>
<h3 id="2西窗烛--古诗">2、西窗烛 / 古诗</h3>
<p><a href="http://lib.xcz.im/library" target="_blank" rel="noopener noreffer">http://lib.xcz.im/library</a></p>]]></description>
</item><item>
    <title>知乎就月饼吃坏肚子致歉</title>
    <link>https://sugarless.top/posts/news/zhihu-apologizes-for-the-mooncake-incident.html</link>
    <pubDate>Wed, 08 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/news/zhihu-apologizes-for-the-mooncake-incident.html</guid>
    <description><![CDATA[<p>知乎送给大 V 的月饼吃了之后拉肚子，原因是这批月饼用的糖醇（麦芽糖醇）代替糖，而摄入大量糖醇会导致腹泻，有些人喝太多代糖饮料会腹泻也是同样原因，这回真“泻药”了。。。</p>
<p>不得不说，月饼的外包装还是挺好看的。</p>
<figure><a class="lightgallery" href="/post_images/image-20210909161118120.png" title="/post_images/image-20210909161118120.png" data-thumbnail="/post_images/image-20210909161118120.png" data-sub-html="<h2>即刻 - 油百万 动态配图</h2>">
        
    </a><figcaption class="image-caption">即刻 - 油百万 动态配图</figcaption>
    </figure>
<!-- raw HTML omitted -->
<figure><a class="lightgallery" href="/post_images/image-20210909160738423.png" title="/post_images/image-20210909160738423.png" data-thumbnail="/post_images/image-20210909160738423.png" data-sub-html="<h2>即刻 - 油百万 动态配图</h2>">
        
    </a><figcaption class="image-caption">即刻 - 油百万 动态配图</figcaption>
    </figure>
<!-- raw HTML omitted -->
<figure><a class="lightgallery" href="/post_images/image-20210909160914669.png" title="/post_images/image-20210909160914669.png" data-thumbnail="/post_images/image-20210909160914669.png" data-sub-html="<h2>即刻 - 油百万 动态配图</h2>">
        
    </a><figcaption class="image-caption">即刻 - 油百万 动态配图</figcaption>
    </figure>
<!-- raw HTML omitted -->
<figure><a class="lightgallery" href="/post_images/image-20210909160941837.png" title="/post_images/image-20210909160941837.png" data-thumbnail="/post_images/image-20210909160941837.png" data-sub-html="<h2>即刻 - 油百万 动态配图</h2>">
        
    </a><figcaption class="image-caption">即刻 - 油百万 动态配图</figcaption>
    </figure>
<!-- raw HTML omitted -->
<p>知乎官方微博原文截图</p>
<figure><a class="lightgallery" href="/post_images/image-20210909020717395.png" title="/post_images/image-20210909020717395.png" data-thumbnail="/post_images/image-20210909020717395.png" data-sub-html="<h2>官方微博账号道歉声明</h2>">
        
    </a><figcaption class="image-caption">官方微博账号道歉声明</figcaption>
    </figure>
<!-- raw HTML omitted -->
<p>微博原文中的 P3，是此次月饼采销的负责人发言。</p>
<figure><a class="lightgallery" href="/post_images/0024UdtXly1gu9gw8412xj60t416ctfg02.jpg" title="/post_images/0024UdtXly1gu9gw8412xj60t416ctfg02.jpg" data-thumbnail="/post_images/0024UdtXly1gu9gw8412xj60t416ctfg02.jpg" data-sub-html="<h2>此次月饼采销负责人发言</h2>">
        
    </a><figcaption class="image-caption">此次月饼采销负责人发言</figcaption>
    </figure>
<!-- raw HTML omitted -->
<p>在官方出面道歉前，其实已经有知乎用户给出了相关解释。</p>
<figure><a class="lightgallery" href="/post_images/0d95b77fef1102bed4ec663f4986e6af2050e42f.jpg@518w.webp" title="/post_images/0d95b77fef1102bed4ec663f4986e6af2050e42f.jpg@518w.webp" data-thumbnail="/post_images/0d95b77fef1102bed4ec663f4986e6af2050e42f.jpg@518w.webp" data-sub-html="<h2>知乎用户爆料</h2>">
        
    </a><figcaption class="image-caption">知乎用户爆料</figcaption>
    </figure>
<!-- raw HTML omitted -->
<p>官方账号道歉声明微博下对控评不满的网友们。</p>
<figure><a class="lightgallery" href="/post_images/242aade9ae3be74133a3afe98cdbff51e5f5bb76.jpg@518w.webp" title="/post_images/242aade9ae3be74133a3afe98cdbff51e5f5bb76.jpg@518w.webp" data-thumbnail="/post_images/242aade9ae3be74133a3afe98cdbff51e5f5bb76.jpg@518w.webp" data-sub-html="<h2>网友们</h2>">
        
    </a><figcaption class="image-caption">网友们</figcaption>
    </figure>
<!-- raw HTML omitted -->
<figure><a class="lightgallery" href="/post_images/image-20210909021633620.png" title="/post_images/image-20210909021633620.png" data-thumbnail="/post_images/image-20210909021633620.png" data-sub-html="<h2>网友们</h2>">
        
    </a><figcaption class="image-caption">网友们</figcaption>
    </figure>
<!-- raw HTML omitted -->
<figure><a class="lightgallery" href="/post_images/image-20210909021829820.png" title="/post_images/image-20210909021829820.png" data-thumbnail="/post_images/image-20210909021829820.png" data-sub-html="<h2>网友们</h2>">
        
    </a><figcaption class="image-caption">网友们</figcaption>
    </figure>
<!-- raw HTML omitted -->
<h1 id="ref">REF</h1>
<p>即刻 - 油百万：<a href="https://m.okjike.com/originalPosts/6136198602cb2b0010e286d9" target="_blank" rel="noopener noreffer">https://m.okjike.com/originalPosts/6136198602cb2b0010e286d9</a></p>
<p>微博 - 知乎官微道歉声明原文：<a href="https://weibo.com/1904769205/KxfvMybtj" target="_blank" rel="noopener noreffer">https://weibo.com/1904769205/KxfvMybtj</a></p>
]]></description>
</item><item>
    <title>12、剑指 Offer 10- I. 斐波那契数列</title>
    <link>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/12.html</link>
    <pubDate>Tue, 07 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/12.html</guid>
    <description><![CDATA[<h1 id="一题目">一、题目</h1>
<p><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/" target="_blank" rel="noopener noreffer">剑指 Offer 10- I. 斐波那契数列</a> 难度简单</p>
<p>写一个函数，输入 <code>n</code> ，求斐波那契（Fibonacci）数列的第 <code>n</code> 项（即 <code>F(N)</code>）。斐波那契数列的定义如下：</p>
<pre><code>F(0) = 0,   F(1) = 1
F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.
</code></pre><p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：n = 2
输出：1
</code></pre><p><strong>示例 2：</strong></p>
<pre><code>输入：n = 5
输出：5
</code></pre><p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= n &lt;= 100</code></li>
</ul>
<h1 id="二解法">二、解法</h1>
<h2 id="21动态规划">2.1、动态规划</h2>
<h3 id="核心思路">核心思路：</h3>
<p>斐波那契数的边界条件是 F(0)=0 和 F(1)=1。当 n&gt;1 时，每一项的和都等于前两项的和，因此有如下递推关系：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain">F(n)=F(n-1)+F(n-2)
</code></pre></div><p>由于斐波那契数存在递推关系，因此可以使用动态规划求解。动态规划的状态转移方程即为上述递推关系，边界条件为 F(0) 和 F(1)。</p>
<p>计算过程中，答案需要取模 1e9+7。</p>
<h3 id="复杂度分析">复杂度分析：</h3>
<p><strong>时间复杂度 O(N)</strong>：计算 f(n) 需循环 n 次，每轮循环内计算操作使用 O(1)。</p>
<p><strong>空间复杂度 O(1)</strong>：几个标志变量使用常数大小的额外空间。</p>
<h3 id="code">Code：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">fib</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="n">MOD</span> <span class="o">=</span> <span class="n">1000000007</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">;</span> 
            <span class="n">q</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span> 
            <span class="n">r</span> <span class="o">=</span> <span class="o">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">q</span><span class="o">)</span> <span class="o">%</span> <span class="n">MOD</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="22矩阵快速幂待续">2.2、矩阵快速幂（待续）</h2>
<p>动态规划的时间复杂度是 O(n)。使用矩阵快速幂的方法可以降低时间复杂度。</p>
<h3 id="核心思路-1">核心思路：</h3>
<h3 id="复杂度分析-1">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(log n)。</p>
<p><strong>空间复杂度</strong>：O(1)。</p>
<h3 id="code-1">Code：</h3>
<h1 id="ref">REF</h1>
<p><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/fei-bo-na-qi-shu-lie-by-leetcode-solutio-hbss/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/fei-bo-na-qi-shu-lie-by-leetcode-solutio-hbss/</a></p>
]]></description>
</item><item>
    <title>10、剑指 Offer 04. 二维数组中的查找</title>
    <link>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/10.html</link>
    <pubDate>Sat, 04 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/10.html</guid>
    <description><![CDATA[<h1 id="一题目">一、题目</h1>
<p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/" target="_blank" rel="noopener noreffer">剑指 Offer 04. 二维数组中的查找</a> 难度中等</p>
<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p><strong>示例:</strong></p>
<p>现有矩阵 matrix 如下：</p>
<pre><code>[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
</code></pre><p>给定 target = <code>5</code>，返回 <code>true</code>。</p>
<p>给定 target = <code>20</code>，返回 <code>false</code>。</p>
<p><strong>限制：</strong></p>
<pre><code>0 &lt;= n &lt;= 1000
0 &lt;= m &lt;= 1000
</code></pre><p>**注意：**本题与主站 240 题相同：https://leetcode-cn.com/problems/search-a-2d-matrix-ii/</p>
<h1 id="二解法">二、解法</h1>
<h2 id="21旋转法线性查找">2.1、旋转法（线性查找）</h2>
<h3 id="核心思想">核心思想：</h3>
<p>如下图所示，我们将矩阵逆时针旋转 45° ，并将其转化为图形式，发现其类似于 二叉搜索树 ，即对于每个元素，其左分支元素更小、右分支元素更大。因此，通过从 “根节点” 开始搜索，遇到比 target 大的元素就向左，反之向右，即可找到目标值 target 。</p>
<p></p>
<p>“根节点” 对应的是矩阵的 “左下角” 和 “右上角” 元素，也就是上图标注蓝色的 3 和 7，实际上以这两个元素为起点搜索都可以。</p>
<h3 id="复杂度分析">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(M+N)，其中，N 和 M 分别为矩阵行数和列数，此算法最多循环 M+N 次。</p>
<p><strong>空间复杂度</strong>：O(1)， <code>i</code>, <code>j</code>  指针使用常数大小额外空间。</p>
<h3 id="代码">代码：</h3>
<p>以左下角为起点，向上搜索</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">findNumberIn2DArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 将左下角元素作为起点（初始下标）
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>

        <span class="c1">// 循环寻找
</span><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">--;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">j</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>或以右上角为起点，向下搜索</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">findNumberIn2DArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 将右上角元素作为起点（初始下标）
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>

        <span class="c1">// 循环寻找
</span><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">j</span><span class="o">--;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="22暴力法">2.2、暴力法</h2>
<h3 id="核心思想-1">核心思想：</h3>
<p>如果不考虑二维数组排好序的特点，则直接遍历整个二维数组的每一个元素，判断目标值是否在二维数组中存在。</p>
<p>依次遍历二维数组的每一行和每一列。如果找到一个元素等于目标值，则返回 true。如果遍历完毕仍未找到等于目标值的元素，则返回 false。</p>
<h3 id="复杂度分析-1">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(nm)。二维数组中的每个元素都被遍历，因此时间复杂度为二维数组的大小。</p>
<p><strong>空间复杂度</strong>：O(1)。</p>
<h3 id="代码-1">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">findNumberIn2DArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 处理边界条件
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">matrix</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 获取矩阵的行列值
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// 遍历矩阵每个元素查找
</span><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rows</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">columns</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h1 id="ref">REF</h1>
<p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-zuo/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-zuo/</a></p>
<p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-b-3/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-b-3/</a></p>
]]></description>
</item><item>
    <title>11、剑指 Offer 29. 顺时针打印矩阵</title>
    <link>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/11.html</link>
    <pubDate>Sat, 04 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/11.html</guid>
    <description><![CDATA[<h1 id="一题目">一、题目</h1>
<p><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/" target="_blank" rel="noopener noreffer">剑指 Offer 29. 顺时针打印矩阵</a> 难度简单</p>
<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]
</code></pre><p><strong>示例 2：</strong></p>
<pre><code>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
</code></pre><p><strong>限制：</strong></p>
<ul>
<li><code>0 &lt;= matrix.length &lt;= 100</code></li>
<li><code>0 &lt;= matrix[i].length &lt;= 100</code></li>
</ul>
<p>注意：本题与主站 54 题相同：https://leetcode-cn.com/problems/spiral-matrix/</p>
<h1 id="二解法">二、解法</h1>
<h2 id="21四相边界法">2.1、四相边界法</h2>
<h3 id="核心思想">核心思想：</h3>
<p>已知顺时针打印矩阵的顺序是 <strong>“从左向右、从上向下、从右向左、从下向上”</strong> 循环，考虑设定矩阵的“左、上、右、下”四个边界，模拟以上矩阵遍历顺序。</p>
<ul>
<li>上边界 ( top )、下边界 ( bottom )；</li>
<li>左边界 ( left )、右边界 ( right )；</li>
</ul>
<table>
<thead>
<tr>
<th>打印方向</th>
<th>1. 根据边界打印</th>
<th style="text-align:left">2. 边界向内收缩</th>
<th>3. 是否打印完毕</th>
</tr>
</thead>
<tbody>
<tr>
<td>从左向右</td>
<td>左边界<code>l</code> ，右边界 <code>r</code></td>
<td style="text-align:left">上边界 <code>t</code> 加 11</td>
<td>是否 <code>t &gt; b</code></td>
</tr>
<tr>
<td>从上向下</td>
<td>上边界 <code>t</code> ，下边界<code>b</code></td>
<td style="text-align:left">右边界 <code>r</code> 减 11</td>
<td>是否 <code>l &gt; r</code></td>
</tr>
<tr>
<td>从右向左</td>
<td>右边界 <code>r</code> ，左边界<code>l</code></td>
<td style="text-align:left">下边界 <code>b</code> 减 11</td>
<td>是否 <code>t &gt; b</code></td>
</tr>
<tr>
<td>从下向上</td>
<td>下边界 <code>b</code> ，上边界<code>t</code></td>
<td style="text-align:left">左边界 <code>l</code> 加 11</td>
<td>是否 <code>l &gt; r</code></td>
</tr>
</tbody>
</table>
<h3 id="复杂度分析">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(MN)， M, N 分别为矩阵行数和列数。</p>
<p><strong>空间复杂度</strong>：O(1)， 四个边界 <code>l</code> , <code>r</code> , <code>t</code> , <code>b</code> 使用常数大小的 <strong>额外</strong> 空间（ <code>res</code> 为必须使用的空间）。</p>
<h3 id="代码">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">spiralOrder</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[(</span><span class="n">r</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">1</span><span class="o">)];</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
                <span class="n">res</span><span class="o">[</span><span class="n">x</span><span class="o">++]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">t</span><span class="o">][</span><span class="n">i</span><span class="o">];</span> <span class="c1">// left to right.
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(++</span><span class="n">t</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
                <span class="n">res</span><span class="o">[</span><span class="n">x</span><span class="o">++]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">r</span><span class="o">];</span> <span class="c1">// top to bottom.
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="o">--</span><span class="n">r</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
                <span class="n">res</span><span class="o">[</span><span class="n">x</span><span class="o">++]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">b</span><span class="o">][</span><span class="n">i</span><span class="o">];</span> <span class="c1">// right to left.
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">&gt;</span> <span class="o">--</span><span class="n">b</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">t</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
                <span class="n">res</span><span class="o">[</span><span class="n">x</span><span class="o">++]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">l</span><span class="o">];</span> <span class="c1">// bottom to top.
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(++</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="22辅助矩阵法">2.2、辅助矩阵法</h2>
<h3 id="核心思想-1">核心思想：</h3>
<p>可以模拟打印矩阵的路径。初始位置是矩阵的左上角，初始方向是向右，当路径超出界限或者进入之前访问过的位置时，顺时针旋转，进入下一个方向。</p>
<p>判断路径是否进入之前访问过的位置需要使用一个与输入矩阵大小相同的辅助矩阵 visited，其中的每个元素表示该位置是否被访问过。当一个元素被访问时，将 visited 中的对应位置的元素设为已访问。</p>
<p>如何判断路径是否结束？由于矩阵中的每个元素都被访问一次，因此路径的长度即为矩阵中的元素数量，当路径的长度达到矩阵中的元素数量时即为完整路径，将该路径返回。</p>
<h3 id="复杂度分析-1">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(mn)，其中 m 和 n 分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。</p>
<p><strong>空间复杂度</strong>：O(mn)，需要创建一个大小为 m×n 的矩阵 visited 记录每个位置是否被访问过。</p>
<h3 id="代码-1">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">spiralOrder</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 边界条件
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">matrix</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c1">// 获取矩阵的行列数
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
        <span class="c1">// 构造辅助矩阵
</span><span class="c1"></span>        <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">rows</span><span class="o">][</span><span class="n">columns</span><span class="o">];</span>
        <span class="c1">// 计算矩阵元素个数总和
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">columns</span><span class="o">;</span>

        <span class="c1">// 答案
</span><span class="c1"></span>        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">total</span><span class="o">];</span>

        <span class="c1">// 当前坐标
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">column</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>

        <span class="c1">// 方向
</span><span class="c1"></span>        <span class="kt">int</span><span class="o">[][]</span> <span class="n">directions</span> <span class="o">=</span> <span class="o">{{</span><span class="n">0</span><span class="o">,</span> <span class="n">1</span><span class="o">},</span> <span class="o">{</span><span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">},</span> <span class="o">{</span><span class="n">0</span><span class="o">,</span> <span class="o">-</span><span class="n">1</span><span class="o">},</span> <span class="o">{-</span><span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">}};</span>
        <span class="c1">// 当前是哪个方向
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">directionIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">total</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// 将当前元素写入 result
</span><span class="c1"></span>            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">column</span><span class="o">];</span>

            <span class="c1">// 在辅助矩阵中标注已访问过
</span><span class="c1"></span>            <span class="n">visited</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">column</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="c1">// 计算当前方向的下一个坐标
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">nextRow</span> <span class="o">=</span> <span class="n">row</span> <span class="o">+</span> <span class="n">directions</span><span class="o">[</span><span class="n">directionIndex</span><span class="o">][</span><span class="n">0</span><span class="o">],</span> <span class="n">nextColumn</span> <span class="o">=</span> <span class="n">column</span> <span class="o">+</span> <span class="n">directions</span><span class="o">[</span><span class="n">directionIndex</span><span class="o">][</span><span class="n">1</span><span class="o">];</span>
            <span class="c1">// 判断下一个坐标是否超限或已被访问过
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">nextRow</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">||</span> <span class="n">nextRow</span> <span class="o">&gt;=</span> <span class="n">rows</span> <span class="o">||</span> <span class="n">nextColumn</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">||</span> <span class="n">nextColumn</span> <span class="o">&gt;=</span> <span class="n">columns</span> <span class="o">||</span> <span class="n">visited</span><span class="o">[</span><span class="n">nextRow</span><span class="o">][</span><span class="n">nextColumn</span><span class="o">])</span> <span class="o">{</span>
                <span class="c1">// 顺时针转向 90°
</span><span class="c1"></span>                <span class="n">directionIndex</span> <span class="o">=</span> <span class="o">(</span><span class="n">directionIndex</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span> <span class="o">%</span> <span class="n">4</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// 按照当前方向，走一步
</span><span class="c1"></span>            <span class="n">row</span> <span class="o">+=</span> <span class="n">directions</span><span class="o">[</span><span class="n">directionIndex</span><span class="o">][</span><span class="n">0</span><span class="o">];</span>
            <span class="n">column</span> <span class="o">+=</span> <span class="n">directions</span><span class="o">[</span><span class="n">directionIndex</span><span class="o">][</span><span class="n">1</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h1 id="ref">REF</h1>
<p><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/solution/shun-shi-zhen-da-yin-ju-zhen-by-leetcode-solution/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/solution/shun-shi-zhen-da-yin-ju-zhen-by-leetcode-solution/</a></p>
<p><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/solution/mian-shi-ti-29-shun-shi-zhen-da-yin-ju-zhen-she-di/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/solution/mian-shi-ti-29-shun-shi-zhen-da-yin-ju-zhen-she-di/</a></p>
]]></description>
</item><item>
    <title>9、剑指 Offer 06. 从尾到头打印链表</title>
    <link>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/9.html</link>
    <pubDate>Thu, 02 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/9.html</guid>
    <description><![CDATA[<h1 id="一题目">一、题目</h1>
<p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/" target="_blank" rel="noopener noreffer">剑指 Offer 06. 从尾到头打印链表</a> 难度简单</p>
<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：head = [1,3,2]
输出：[2,3,1]
</code></pre><p><strong>限制：</strong></p>
<pre><code>0 &lt;= 链表长度 &lt;= 10000
</code></pre><h1 id="二解法">二、解法</h1>
<h2 id="21辅助栈">2.1、辅助栈</h2>
<h3 id="核心思想">核心思想：</h3>
<p>栈的特点是后进先出，即最后压入栈的元素最先弹出。考虑到栈的这一特点，使用栈将链表元素顺序倒置。从链表的头节点开始，依次将每个节点的值压入栈内，然后依次弹出栈内的元素并存储到数组中。</p>
<h3 id="复杂度分析">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(n)。正向遍历一遍链表，然后从栈弹出全部节点，等于又反向遍历一遍链表。</p>
<p><strong>空间复杂度</strong>：O(n)。额外使用一个栈存储链表中的每个节点。</p>
<h3 id="代码">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">reversePrint</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// 遍历链表, 入栈
</span><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>

        <span class="c1">// 循环出栈,构造数据
</span><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">result</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="21递归法">2.1、递归法</h2>
<h3 id="核心思想-1">核心思想：</h3>
<p>利用递归： 先走至链表末端，回溯时依次将节点值加入列表 ，这样就可以实现链表值的倒序输出。</p>
<ul>
<li><strong>递推阶段：</strong> 每次传入 <code>head.next</code> ，以 <code>head == null</code>（即走过链表尾部节点）为递归终止条件，此时直接返回。</li>
<li><strong>回溯阶段：</strong> 层层回溯时，将当前节点值加入列表，即<code>tmp.add(head.val)</code>。</li>
<li>最终，将列表 <code>tmp</code> 转化为数组 <code>res</code> ，并返回即可。</li>
</ul>
<h3 id="复杂度分析-1">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(N)，遍历链表，递归 N 次。</p>
<p><strong>空间复杂度</strong>：O(N)， 系统递归需要使用 O(N) 的栈空间。</p>
<h3 id="代码-1">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">arrayList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">reversePrint</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 边界值
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{};</span>
        <span class="o">}</span>

        <span class="n">reverse</span><span class="o">(</span><span class="n">head</span><span class="o">);</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arrayList</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrayList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arrayList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 在递归遍历链表的回溯过程中利用 ArrayList 记录数据, 天然就是逆序的
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">arrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 递归调用
</span><span class="c1"></span>        <span class="n">reverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>

        <span class="c1">// 回溯阶段
</span><span class="c1"></span>        <span class="n">arrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h1 id="ref">REF</h1>
<p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution/mian-shi-ti-06-cong-wei-dao-tou-da-yin-lian-biao-b/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution/mian-shi-ti-06-cong-wei-dao-tou-da-yin-lian-biao-b/</a></p>
]]></description>
</item><item>
    <title>8、剑指 Offer 07. 重建二叉树</title>
    <link>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/8.html</link>
    <pubDate>Tue, 31 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/8.html</guid>
    <description><![CDATA[<h1 id="一题目">一、题目</h1>
<p><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/" target="_blank" rel="noopener noreffer">剑指 Offer 07. 重建二叉树</a> 难度中等</p>
<p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。</p>
<p>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>
<p><strong>示例 1:</strong></p>
<p></p>
<pre><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
</code></pre><p><strong>示例 2:</strong></p>
<pre><code>Input: preorder = [-1], inorder = [-1]
Output: [-1]
</code></pre><p><strong>限制：</strong></p>
<pre><code>0 &lt;= 节点个数 &lt;= 5000
</code></pre><p><strong>注意</strong>：本题与主站 105 题重复：https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</p>
<h1 id="二解法">二、解法</h1>
<h2 id="21递归法">2.1、递归法</h2>
<h3 id="核心思想">核心思想：</h3>
<p>对于任意一颗树而言，前序遍历的形式总是如下所示，且根节点总是前序遍历中的第一个节点。</p>
<pre><code>[ 根节点, [左子树的前序遍历结果], [右子树的前序遍历结果] ]
</code></pre><p>而中序遍历的形式总是</p>
<pre><code>[ [左子树的中序遍历结果], 根节点, [右子树的中序遍历结果] ]
</code></pre><p>只要我们在中序遍历中定位到根节点，那么我们就可以分别知道左子树和右子树中的节点数目。由于同一颗子树的前序遍历和中序遍历的长度显然是相同的，因此我们就可以对应到前序遍历的结果中，对上述形式中的所有左右括号进行定位。</p>
<p>这样以来，我们就知道了左子树的前序遍历和中序遍历结果，以及右子树的前序遍历和中序遍历结果，我们就可以递归地对构造出左子树和右子树，再将这两颗子树接到根节点的左右位置。</p>
<p><strong>细节</strong></p>
<p>在中序遍历中对根节点进行定位时，一种简单的方法是直接扫描整个中序遍历的结果并找出根节点，但这样做的时间复杂度较高。我们可以考虑使用哈希表来帮助我们快速地定位根节点。对于哈希映射中的每个键值对，键表示一个元素（节点的值），值表示其在中序遍历中的出现位置。在构造二叉树的过程之前，我们可以对中序遍历的列表进行一遍扫描，就可以构造出这个哈希映射。在此后构造二叉树的过程中，我们就只需要 O(1) 的时间对根节点进行定位了。</p>
<h3 id="复杂度分析">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(n)，其中 n 是树中的节点个数。</p>
<p><strong>空间复杂度</strong>：O(n)，除去返回的答案需要的 O(n) 空间之外，我们还需要使用 O(n) 的空间存储哈希映射，以及 O(h)（其中 h 是树的高度）的空间表示递归时栈空间。这里 h &lt; n，所以总空间复杂度为 O(n)。</p>
<h3 id="代码">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="c1">// 前序遍历值
</span><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">preorder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="c1">// 中序遍历值
</span><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">inorder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="c1">// 保存中序遍历中每个元素各自出现的下标，方便定位
</span><span class="c1"></span>    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">buildTree</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">preorder</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">inorder</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 初始化参数
</span><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">preorder</span> <span class="o">=</span> <span class="n">preorder</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">inorder</span> <span class="o">=</span> <span class="n">inorder</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">inorder</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">inorder</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 递归调用
</span><span class="c1"></span>        <span class="n">TreeNode</span> <span class="n">result</span> <span class="o">=</span> <span class="n">myBuildTree</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">preorder</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">inorder</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 给定一个树的前序遍历与中序遍历，递归生成树结构
</span><span class="cm">     *
</span><span class="cm">     * @param preorderStartIndex 前序遍历下标区间 start
</span><span class="cm">     * @param preorderEndIndex   前序遍历下标区间 end
</span><span class="cm">     * @param inorderStartIndex  中序遍历下标区间 start
</span><span class="cm">     * @param inorderEndIndex    中序遍历下标区间 end
</span><span class="cm">     * @return 
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">myBuildTree</span><span class="o">(</span><span class="kt">int</span> <span class="n">preorderStartIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">preorderEndIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inorderStartIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inorderEndIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">preorderStartIndex</span> <span class="o">&gt;</span> <span class="n">preorderEndIndex</span> <span class="o">||</span> <span class="n">inorderStartIndex</span> <span class="o">&gt;</span> <span class="n">inorderEndIndex</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 如果下标超限,则说明该节点为 null
</span><span class="c1"></span>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 先取得根节点的值
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">rootVal</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">preorder</span><span class="o">[</span><span class="n">preorderStartIndex</span><span class="o">];</span>

        <span class="c1">// 构造出一个新节点
</span><span class="c1"></span>        <span class="n">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">rootVal</span><span class="o">);</span>

        <span class="c1">// 获取根节点的值处于中序遍历中的下标
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">rootIndex</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">rootVal</span><span class="o">);</span>

        <span class="c1">// 计算左子树元素的个数
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">leftSubtreeSize</span> <span class="o">=</span> <span class="n">rootIndex</span> <span class="o">-</span> <span class="n">inorderStartIndex</span><span class="o">;</span>

        <span class="c1">// 递归处理左子树
</span><span class="c1"></span>        <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">myBuildTree</span><span class="o">(</span><span class="n">preorderStartIndex</span> <span class="o">+</span> <span class="n">1</span><span class="o">,</span> <span class="n">preorderStartIndex</span> <span class="o">+</span> <span class="n">leftSubtreeSize</span><span class="o">,</span> <span class="n">inorderStartIndex</span><span class="o">,</span> <span class="n">rootIndex</span> <span class="o">-</span> <span class="n">1</span><span class="o">);</span>

        <span class="c1">// 递归处理右子树
</span><span class="c1"></span>        <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">myBuildTree</span><span class="o">(</span><span class="n">preorderStartIndex</span> <span class="o">+</span> <span class="n">1</span> <span class="o">+</span> <span class="n">leftSubtreeSize</span><span class="o">,</span> <span class="n">preorderEndIndex</span><span class="o">,</span> <span class="n">rootIndex</span> <span class="o">+</span> <span class="n">1</span><span class="o">,</span> <span class="n">inorderEndIndex</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="22迭代法未完待续">2.2、迭代法（未完待续）</h2>
<h3 id="核心思想-1">核心思想：</h3>
<h3 id="复杂度分析-1">复杂度分析：</h3>
<h3 id="代码-1">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 迭代法
</span><span class="c1"></span><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">buildTree</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">preorder</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">inorder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">preorder</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">preorder</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 初始化根节点
</span><span class="c1"></span>        <span class="n">TreeNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">preorder</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>

        <span class="n">Deque</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;();</span>
        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">inorderIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">preorder</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">preorderVal</span> <span class="o">=</span> <span class="n">preorder</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>

            <span class="c1">// 用前序数组一直构建左子树
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">inorder</span><span class="o">[</span><span class="n">inorderIndex</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">preorderVal</span><span class="o">);</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// 碰到了inorder[inorderIndex]，表示到了左下角，这时就需要往上走并处理右子树
</span><span class="c1"></span>                <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">val</span> <span class="o">==</span> <span class="n">inorder</span><span class="o">[</span><span class="n">inorderIndex</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                    <span class="n">inorderIndex</span><span class="o">++;</span>
                <span class="o">}</span>
                <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">preorderVal</span><span class="o">);</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h1 id="ref">REF</h1>
<p><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-by-leetcode-s/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-by-leetcode-s/</a></p>
]]></description>
</item><item>
    <title>Python 百度 SEO 工具脚本 | 百度普通收录 API 提交工具</title>
    <link>https://sugarless.top/posts/baidu-seo-submission-tool-developed-using-python.html</link>
    <pubDate>Tue, 31 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/baidu-seo-submission-tool-developed-using-python.html</guid>
    <description><![CDATA[<p>有兴趣的可以自行部署在服务器上，做成每日自动提交，或者 webhook 触发等。</p>
<p>百度提交页面：https://ziyuan.baidu.com/linksubmit/index</p>
<p>通过此页面可以向百度搜索主动推送资源，同时百度也提供了 API 提交接口，这样可以缩短爬虫发现网站链接的时间，但百度不保证收录和展现效果。</p>
<p>以本站为例，百度提供了 API 提交的样例参数。</p>
<p></p>
<h1 id="源码">源码</h1>
<p>解析站点当前的 sitemap.xml 文件内容，向百度批量提交 url 。</p>
<p>使用前需要注意替换真实参数：</p>
<ul>
<li>site</li>
<li>token</li>
<li>sitemap_path</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># -*- coding: UTF-8 -*-</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">re</span>


<span class="k">class</span> <span class="nc">Pusher</span><span class="p">:</span>
    <span class="c1"># 初始化参数</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">site</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">sitemap_path</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">site</span> <span class="o">=</span> <span class="n">site</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">token</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sitemap_path</span> <span class="o">=</span> <span class="n">sitemap_path</span>

    <span class="c1"># 批量提交 url</span>
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">urls</span><span class="p">):</span>
        <span class="n">post_url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;http://data.zz.baidu.com/urls?site=</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">site</span><span class="si">}</span><span class="s2">&amp;token=</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">token</span><span class="si">}</span><span class="s2">&#34;</span>
        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;curl/7.12.1&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Host&#39;</span><span class="p">:</span> <span class="s1">&#39;data.zz.baidu.com&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Content-Length&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">urls</span><span class="p">)),</span>
        <span class="p">}</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">post_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">urls</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;推送失败（异常状态码）：</span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">()</span>
            <span class="k">return</span> <span class="kc">None</span>

        <span class="n">response</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>

        <span class="k">if</span> <span class="s2">&#34;error&#34;</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;推送失败（error）&#34;</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">()</span>
            <span class="k">return</span> <span class="kc">None</span>

        <span class="k">if</span> <span class="s2">&#34;success&#34;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">response</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;推送异常（百度已更改返回体格式）&#34;</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">()</span>
            <span class="k">return</span> <span class="kc">None</span>

        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;已成功推送 </span><span class="si">{</span><span class="n">response</span><span class="p">[</span><span class="s1">&#39;success&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2"> 条 url&#34;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;当天剩余的可推送 url 条数 ---&gt; </span><span class="si">{</span><span class="n">response</span><span class="p">[</span><span class="s1">&#39;remain&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">()</span>

        <span class="k">return</span> <span class="kc">None</span>

    <span class="c1"># 获取站点 sitemap.xml 文件内容, 解析 url</span>
    <span class="k">def</span> <span class="nf">get_url_from_sitemap</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">site</span><span class="si">}{</span><span class="bp">self</span><span class="o">.</span><span class="n">sitemap_path</span><span class="si">}</span><span class="s2">&#34;</span>
        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&#39;</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;获取站点 xml 文件失败（异常状态码）：</span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">()</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="n">sitemap_xml</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span>

        <span class="n">urls</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;&lt;loc&gt;(.+?)&lt;/loc&gt;&#39;</span><span class="p">,</span> <span class="n">sitemap_xml</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">S</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">urls</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">or</span> <span class="n">urls</span> <span class="o">==</span> <span class="p">[]</span> <span class="ow">or</span> <span class="n">urls</span> <span class="o">==</span> <span class="s2">&#34;&#34;</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;解析 url 失败（该站点不存在 sitemap.xml 或内容为空）&#34;</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">()</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;获取站点 xml 文件成功, 共有：</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span><span class="si">}</span><span class="s2"> 条 url&#34;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">()</span>

        <span class="k">return</span> <span class="n">urls</span>

    <span class="c1"># 入口</span>
    <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">urls</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_url_from_sitemap</span><span class="p">()</span>

        <span class="n">body</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>

        <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
            <span class="n">body</span> <span class="o">+=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="c1"># 站点</span>
    <span class="n">site</span> <span class="o">=</span> <span class="s2">&#34;https://sugarless.top&#34;</span>
    <span class="c1"># 百度提交页面提供的 token</span>
    <span class="n">token</span> <span class="o">=</span> <span class="s2">&#34;JvNXvshHiebMYkve&#34;</span>
    <span class="c1"># 站点 sitemap uri</span>
    <span class="c1"># sitemap_path = &#34;/zh-cn/sitemap.xml&#34;</span>
    <span class="n">sitemap_path</span> <span class="o">=</span> <span class="s2">&#34;/sitemap.xml&#34;</span>

    <span class="n">pusher</span> <span class="o">=</span> <span class="n">Pusher</span><span class="p">(</span><span class="n">site</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">sitemap_path</span><span class="p">)</span>
    <span class="n">pusher</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</code></pre></div><h1 id="ref">REF</h1>
<p><a href="https://blog.csdn.net/minge89/article/details/108031025" target="_blank" rel="noopener noreffer">https://blog.csdn.net/minge89/article/details/108031025</a></p>]]></description>
</item><item>
    <title>7、剑指 Offer 11. 旋转数组的最小数字</title>
    <link>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/7.html</link>
    <pubDate>Sun, 29 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/7.html</guid>
    <description><![CDATA[<h1 id="一题目">一、题目</h1>
<p><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/" target="_blank" rel="noopener noreffer">剑指 Offer 11. 旋转数组的最小数字</a> 难度简单</p>
<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 <code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一个旋转，该数组的最小值为1。</p>
<p><strong>示例 1：</strong></p>
<pre><code>输入：[3,4,5,1,2]
输出：1
</code></pre><p><strong>示例 2：</strong></p>
<pre><code>输入：[2,2,2,0,1]
输出：0
</code></pre><p>注意：本题与主站 154 题相同：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/</p>
<h1 id="二解法">二、解法</h1>
<h2 id="21遍历求最小值不推荐">2.1、遍历求最小值（不推荐）</h2>
<h3 id="核心思想">核心思想：</h3>
<p>遍历数组，求最小值。</p>
<h3 id="复杂度分析">复杂度分析：</h3>
<p><strong>时间复杂度</strong>：O(N) 。</p>
<p><strong>空间复杂度</strong>：O(1)。min 变量使用常数大小的额外空间。</p>
<h3 id="代码">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">minArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">min</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">min</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="22二分法推荐">2.2、二分法（推荐）</h2>
<h3 id="核心思想-1">核心思想：</h3>
<p>排序数组的查找问题首先考虑使用 <strong>二分法</strong> 解决，其可将 <strong>遍历法</strong> 的 <strong>线性级别</strong> 时间复杂度降低至 <strong>对数级别</strong> 。</p>
<p>寻找旋转数组的最小元素即为寻找 <strong>右排序数组</strong> 的首个元素 nums[ x ] ，称 x 为 旋转点。</p>
<ul>
<li>右排序数组：在 [ 3, 4, 5, 1, 2 ] 序列中，我们将 [ 1, 2 ] 称为右排序数组；</li>
<li>旋转点：在 [ 3, 4, 5, 1, 2 ] 序列中，我们将右排序数组的首个元素称为旋转点；</li>
</ul>
<h3 id="复杂度分析-1">复杂度分析：</h3>
<p><strong>时间复杂度：</strong> O(log₂N) 。在特例情况下（例如 [ 1,1,1,1 ]），会退化到 O(N)。</p>
<p><strong>空间复杂度：</strong> O(1)。i， j，mid 变量使用常数大小的额外空间。</p>
<h3 id="代码-1">代码：</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">minArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">numbers</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
                <span class="c1">// 旋转点 x (最小值)一定在 [mid+1,j] 闭区间内
</span><span class="c1"></span>                <span class="n">i</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
                <span class="c1">// 旋转点 x (最小值)一定在 [i,mid] 闭区间内
</span><span class="c1"></span>                <span class="n">j</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// 旋转点在 [i,j-1]
</span><span class="c1"></span>                <span class="n">j</span><span class="o">--;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h1 id="ref">REF</h1>
<p><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/</a></p>
]]></description>
</item><item>
    <title>6、剑指 Offer 22. 链表中倒数第k个节点</title>
    <link>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/6.html</link>
    <pubDate>Sat, 28 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.top/posts/series/leetcode-jianzhioffer-java/6.html</guid>
    <description><![CDATA[<h1 id="一题目">一、题目</h1>
<p><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener noreffer">剑指 Offer 22. 链表中倒数第k个节点</a> 难度简单</p>
<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>
<p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p>
<p><strong>示例：</strong></p>
<pre><code>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.

返回链表 4-&gt;5.
</code></pre><h1 id="二解法">二、解法</h1>
<h2 id="21双指针二次遍历">2.1、双指针二次遍历</h2>
<h3 id="核心思路">核心思路：</h3>
<ol>
<li>先遍历统计链表长度，记为 count ；</li>
<li>设置一个指针走 (n-k) 步，即可找到链表倒数第 k 个节点。</li>
</ol>
<p>这也是最容易想到的解法</p>
<h3 id="复杂度分析">复杂度分析：</h3>
<p>时间复杂度 O(N) ： 需要两次遍历，因此至多为 2N 。
空间复杂度 O(1) ： 需要一个辅助指针，使用常数大小的额外空间。</p>
<h3 id="代码">代码：</h3>
<p>需要注意的是，此解法没有考虑以下几种特殊情况。</p>
<ol>
<li>head为空指针；</li>
<li>k大于链表的长度；</li>
<li>输入的参数k为0；</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">getKthFromEnd</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ListNode</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>

        <span class="c1">// 第一次遍历链表,计算总节点数
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">count</span><span class="o">++;</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 第二次遍历链表,找到倒数第k个元素
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="n">k</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">index</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="22双指针单次遍历">2.2、双指针单次遍历</h2>
<h3 id="核心思路-1">核心思路：</h3>
<p>不需要知道链表长度，指针 1 先走 k-1 步，然后指针 2 和指针 1 同时前进，当指针 1 指向链表最后一个元素时，指针 2 即为所求。</p>
<h3 id="复杂度分析-1">复杂度分析：</h3>
<p>时间复杂度 O(N) ： N 为链表长度；总体看， 指针 1 走了 N 步， 指针 走了 (N-k)(N−k) 步。
空间复杂度 O(1)： 双指针 former , latter 使用常数大小的额外空间。</p>
<h3 id="代码-1">代码：</h3>
<p>需要注意的是，此解法没有考虑以下几种特殊情况。</p>
<ol>
<li>head为空指针；</li>
<li>k大于链表的长度；</li>
<li>输入的参数k为0；</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">getKthFromEnd</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ListNode</span> <span class="n">former</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">latter</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>

        <span class="c1">// 让指针 1 先走 k 步
</span><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">former</span> <span class="o">=</span> <span class="n">former</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>

        <span class="c1">// 让指针1 和指针 2 同步移动, 待指针 2 走至链表尾结点时, 指针 1 指向的结点就是符合题意的答案
</span><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">former</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">former</span> <span class="o">=</span> <span class="n">former</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">latter</span> <span class="o">=</span> <span class="n">latter</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">latter</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h1 id="ref">REF</h1>
<p><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/" target="_blank" rel="noopener noreffer">https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/</a></p>
]]></description>
</item></channel>
</rss>

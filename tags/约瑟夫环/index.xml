<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>约瑟夫环 - 标签 - 無糖的小宇宙</title>
        <link>https://sugarless.cn/tags/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF.html</link>
        <description>约瑟夫环 - 标签 - 無糖的小宇宙</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jaded@foxmail.com (無糖)</managingEditor>
            <webMaster>jaded@foxmail.com (無糖)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 15 Sep 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://sugarless.cn/tags/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF.html" rel="self" type="application/rss+xml" /><item>
    <title>17、剑指 Offer 62. 圆圈中最后剩下的数字</title>
    <link>https://sugarless.cn/posts/series/leetcode-jianzhioffer-java/17.html</link>
    <pubDate>Wed, 15 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/series/leetcode-jianzhioffer-java/17.html</guid>
    <description><![CDATA[<h1 id="一题目" class="headerLink">
    <a href="#%e4%b8%80%e9%a2%98%e7%9b%ae" class="header-mark"></a>一、题目</h1><p><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" target="_blank" rel="noopener noreferrer">剑指 Offer 62. 圆圈中最后剩下的数字</a> 难度简单</p>
<p>0,1,···,n-1 这 n 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。</p>
<p>例如，0、1、2、3、4 这 5 个数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、1，因此最后剩下的数字是 3。</p>
<p><strong>示例 1：</strong></p>
<pre tabindex="0"><code>输入: n = 5, m = 3
输出: 3
</code></pre><p><strong>示例 2：</strong></p>
<pre tabindex="0"><code>输入: n = 10, m = 17
输出: 2
</code></pre><p><strong>限制：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
<li><code>1 &lt;= m &lt;= 10^6</code></li>
</ul>
<h1 id="二解法" class="headerLink">
    <a href="#%e4%ba%8c%e8%a7%a3%e6%b3%95" class="header-mark"></a>二、解法</h1><h2 id="21动态规划" class="headerLink">
    <a href="#21%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92" class="header-mark"></a>2.1、动态规划</h2><h3 id="核心思路" class="headerLink">
    <a href="#%e6%a0%b8%e5%bf%83%e6%80%9d%e8%b7%af" class="header-mark"></a>核心思路</h3><p>设 dp[n,m] 表示在 n 个数字序列（0~n-1）中不断删除第 m 个数字后，最后剩下那一个数。</p>
<p>假设 n=5，m=3，则 dp[5,3] 的初始化数组是：</p>
<p><code>0 1 2 3 4</code></p>
<p>若 n=4，m=3，则 dp[5-1,3] 也就是 dp[4,3] 的初始化数组是：</p>
<p><code>0 1 2 3</code></p>
<p>从初始化数组可以看出，dp[5,3] 和 dp[4,3] 最终的结果是不一样的。而 dp[5,3] 删掉一个数字后的数组应该是：</p>
<p><code>3 4 0 1</code></p>
<p>这个数组咱们给他取名为 dp&rsquo;[4,3]，它是不是跟 dp[4,3] 有一些联系呢？咱们把他俩的初始数组放在一起比较：</p>
<p>dp[4,3]：<code>0 1 2 3</code></p>
<p>dp&rsquo;[4,3]：<code>3 4 0 1</code></p>
<p>从上面可能还是看不出具体区别，因此我们来看 dp[n-1,m] 和 dp&rsquo;[n-1,m]的初始数组区别：</p>
<table>
<thead>
<tr>
<th style="text-align:center">dp[n-1,m]</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">…</th>
<th style="text-align:center">n-1-m</th>
<th style="text-align:center">n-m</th>
<th style="text-align:center">…</th>
<th style="text-align:center">n-3</th>
<th style="text-align:center">n-2</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">dp’[n-1,m]</td>
<td style="text-align:center">m</td>
<td style="text-align:center">m+1</td>
<td style="text-align:center">…</td>
<td style="text-align:center">n-1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">…</td>
<td style="text-align:center">m-3</td>
<td style="text-align:center">m-2</td>
</tr>
</tbody>
</table>
<p>观察上面的表格，我们发现 dp[n-1,m] 和 dp&rsquo;[n-1,m] 的初始数组有如下规律：</p>
<p><code>dp'[n-1,m] = ( dp[n-1,m] + m ) % n</code></p>
<p>因为 dp[n,m] = dp&rsquo;[n-1,m]，所以咱们就找出了 dp[n,m] 到 dp[n-1,m] 之间的映射关系，也就是：</p>
<p>dp[n,m] = ( dp[n−1,m] + m ) % n</p>
<p>考虑边界条件，n 肯定是要大于1的；此外当 n=1 时，就只剩下一个数了，那就是 0。因此得出状态转移方程为：</p>
<p><code>dp[n,m]=0, n=1</code></p>
<p><code>dp[n,m] = ( dp[n−1,m] + m ) % n, 1&lt;n</code></p>
<p>观察状态转移方程式，发现 m 是不变的而且 dp[n,m] 只跟 dp[n-1,m] 有关，因此可以直接使用一个变量来代替 dp[n,m]，然后从下往上递推实现。</p>
<p>另外，因为 dp[5,3] 的初始数组是 <code>0 1 2 3 4</code>，值与下标相同，即上述规律适用于数组下标。</p>
<h3 id="复杂度分析" class="headerLink">
    <a href="#%e5%a4%8d%e6%9d%82%e5%ba%a6%e5%88%86%e6%9e%90" class="header-mark"></a>复杂度分析</h3><p><strong>时间复杂度</strong>：O(n)</p>
<p><strong>空间复杂度</strong>：O(1)</p>
<h3 id="code" class="headerLink">
    <a href="#code" class="header-mark"></a>Code</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lastRemaining</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">answer</span> <span class="o">=</span> <span class="o">(</span><span class="n">answer</span> <span class="o">+</span> <span class="n">m</span><span class="o">)</span> <span class="o">%</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h1 id="ref" class="headerLink">
    <a href="#ref" class="header-mark"></a>REF</h1><p><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/tai-jiao-bi-ye-ye-neng-dong-dong-tai-gui-zmwj/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/tai-jiao-bi-ye-ye-neng-dong-dong-tai-gui-zmwj/</a></p>
]]></description>
</item></channel>
</rss>

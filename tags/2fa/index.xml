<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>2FA - 标签 - 無糖的小宇宙</title>
        <link>https://sugarless.cn/tags/2fa.html</link>
        <description>2FA - 标签 - 無糖的小宇宙</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jaded@foxmail.com (無糖)</managingEditor>
            <webMaster>jaded@foxmail.com (無糖)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 15 Sep 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://sugarless.cn/tags/2fa.html" rel="self" type="application/rss+xml" /><item>
    <title>2FA 是什么？</title>
    <link>https://sugarless.cn/posts/what-is-2fa.html</link>
    <pubDate>Wed, 15 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/what-is-2fa.html</guid>
    <description><![CDATA[<p>两步验证是什么东西？为什么当年的 QQ 令牌可以离线生成动态验证码？</p>
<h1 id="一2fa-是什么">一、2FA 是什么？</h1>
<p>2FA，2 Factor Authentication，双因子验证，是一种安全密码验证方式。区别于传统的密码验证，由于传统的密码验证是由一组静态信息组成，如：字符、图像、手势等，很容易被获取，相对不安全。2FA是基于时间、历史长度、实物（信用卡、SMS手机、令牌、指纹）等自然变量结合一定的加密算法组合出一组动态密码，一般每 30 / 60 秒刷新一次。不容易被获取和破解，相对安全。</p>
<p>以上是百度百科对 2FA 的描述，这么讲可能不太好理解。</p>
<p>一般来说，三种不同类型的证据，可以证明一个人的身份。</p>
<ul>
<li>
<p><strong>秘密信息</strong>：只有该用户知道、其他人不知道的某种信息，比如密码。</p>
</li>
<li>
<p><strong>个人物品</strong>：该用户的私人物品，比如身份证、钥匙。</p>
</li>
<li>
<p><strong>生理特征</strong>：该用户的遗传特征，比如指纹、相貌、虹膜等等。</p>
</li>
</ul>
<p>这些证据就称为三种&quot;因素&quot;（factor）。因素越多，证明力就越强，身份就越可靠。2FA 就是指，通过认证同时需要两个因素的证据。银行卡就是最常见的双因素认证。用户必须同时提供银行卡和密码，才能取到现金。</p>
<p>常用的双因素组合是密码 + 某种能代表个人身份的物品。比如网上银行的 U 盾，用户插上 U 盾，再输入密码，才能登录网上银行。</p>
<p>但是，用户不可能随时携带 U 盾，手机才是最好的替代品。于是就有了密码 + 手机的双因素认证方案。在注册新账号或敏感操作时，部分网站会要求用户输入密码后，还要提供网站发送给用户的手机短信验证码，以证明用户确实拥有该手机。</p>
<p>然而，短信验证码是不安全的，它容易被拦截和伪造，SIM 卡也可以克隆。已经有<a href="http://media.people.com.cn/n/2014/0227/c40606-24477072.html" target="_blank" rel="noopener noreffer">案例</a>，先伪造身份证，再申请一模一样的手机号码，把钱转走。因此，安全的双因素认证不是密码 + 短消息，而是下面要介绍的 <a href="https://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm" target="_blank" rel="noopener noreffer">TOTP</a>。</p>
<p>在此之前，先给你举一个 2FA 在网站中的实际应用案例吧。</p>
<h1 id="二如何使用-2fa">二、如何使用 2FA？</h1>
<p>以 <a href="https://next.itellyou.cn/" target="_blank" rel="noopener noreffer">https://next.itellyou.cn/</a> 为例，账号启用 2FA 的步骤如下：</p>
<ol>
<li>
<p>点击双重验证 -&gt; 选择配置新的验证器，此时页面上已经显示了一串密钥和密钥的二维码。</p>
<blockquote>
<p>账号启用双重验证，服务器为该账号生成一个密钥</p>
</blockquote>
</li>
</ol>
<figure><a class="lightgallery" href="/post_images/image-20210913152802456.png" title="/post_images/image-20210913152802456.png" data-thumbnail="/post_images/image-20210913152802456.png" data-sub-html="<h2>配置双重验证</h2>">
        
    </a><figcaption class="image-caption">配置双重验证</figcaption>
    </figure>
<!-- raw HTML omitted -->
<ol start="2">
<li>
<p>使用 2FA 验证器扫描密钥二维码，或手动输入密钥到 2FA 验证器中，此时你已经和服务器共同掌握了一把密钥。</p>
<blockquote>
<p>服务器将此密钥交给用户，用户将其填写到 2FA 验证器中</p>
</blockquote>
</li>
<li>
<p>将 2FA 验证器提供的 6 位数字验证码输入到提示框中，完成校验。</p>
<blockquote>
<p>服务器与用户的 2FA 验证器将使用此密钥进行哈希计算，得到时效性为 30 秒的 6 位数字验证码，如果两者计算出来的 6 位数字验证码相同，则认为用户已经成功配置了 2FA 验证器。</p>
<p>该用户在今后的登录行为中，除了需要提供密码外，还需要提供 2FA 验证器生成的 6 位验证码。</p>
</blockquote>
</li>
</ol>
<figure><a class="lightgallery" href="/post_images/image-20210913164434456.jpg" title="/post_images/image-20210913164434456.jpg" data-thumbnail="/post_images/image-20210913164434456.jpg" data-sub-html="<h2>动态验证码</h2>">
        
    </a><figcaption class="image-caption">动态验证码</figcaption>
    </figure>
<!-- raw HTML omitted -->
<ol start="4">
<li>服务器提供一串代码作为最后的手段，一旦忘记密码或者遗失手机，想要恢复登录，就可以使用此恢复代码，一般来说这种恢复账号性质的代码都比较长，几乎不可能被暴力破解。</li>
</ol>
<p>下面我们回头继续讲 TOTP 算法。</p>
<h1 id="三totp-算法">三、TOTP 算法</h1>
<p>TOTP 的全称是&quot;基于时间的一次性密码&quot;（Time-based One-time Password）。它是公认的可靠解决方案，已经写入国际标准 <a href="https://tools.ietf.org/html/rfc6238" target="_blank" rel="noopener noreffer">RFC6238</a>。在配置完 2FA 后，使用 TOTP 算法生成 30 秒有效期的 6 位数字验证码，就不再需要与服务端通讯了，它可以在离线的环境下为用户提供一次性验证码。</p>
<p>还记得当年的 QQ 令牌吗？它在 2010 年 7 月 6 日正式发布，动态验证码有效期为 60 秒 ，最神奇的是它不需要联网。当时的我才十几岁，第一次见到这玩意时觉得非常神奇，其实它之所以能离线生成动态验证码的秘密就是 TOTP 算法。</p>
<h2 id="31如何生成一个-30-秒有效期的-6-位数字验证码">3.1、如何生成一个 30 秒有效期的 6 位数字验证码？</h2>
<p>那么<code>手机客户端</code>和<code>服务器</code>是如何保证在 <code>30</code> 秒期间都得到同一个 6 位数字验证码（哈希）呢？答案就是下面的公式。</p>
<p><code>TC = floor((unixtime(now) − unixtime(T0)) / TS)</code></p>
<p>上面的公式中，TC 表示一个时间计数器，<code>floor</code> 是向下取整函数，<code>unixtime(now)</code>是当前 Unix 时间戳，<code>unixtime(T0)</code>是约定的起始时间点的时间戳，默认是<code>0</code>，也就是1970年1月1日。TS 则是哈希有效期的时间长度，默认是30秒。因此，上面的公式就变成下面的形式。</p>
<p><code>TC = floor(unixtime(now) / 30)</code></p>
<p>所以，只要在 30 秒以内，TC 的值都是一样的。前提是服务器和手机的时间必须同步。接下来，就可以算出哈希了。</p>
<p><code>TOTP = HASH(SecretKey, TC)</code></p>
<p>上面代码中，<code>HASH</code>就是约定的哈希函数，默认是 SHA-1。</p>
<p>TOTP 有硬件生成器和软件生成器之分，都是采用上面的算法。</p>
<figure><a class="lightgallery" href="/post_images/image-20210913165747456.jpg" title="/post_images/image-20210913165747456.jpg" data-thumbnail="/post_images/image-20210913165747456.jpg" data-sub-html="<h2>TOTP 硬件生成器 - QQ令牌 1代</h2>">
        
    </a><figcaption class="image-caption">TOTP 硬件生成器 - QQ令牌 1代</figcaption>
    </figure>
<!-- raw HTML omitted -->
<figure><a class="lightgallery" href="/post_images/image-20210913165713456.jpg" title="/post_images/image-20210913165713456.jpg" data-thumbnail="/post_images/image-20210913165713456.jpg" data-sub-html="<h2>TOTP 硬件生成器 - QQ令牌 2代</h2>">
        
    </a><figcaption class="image-caption">TOTP 硬件生成器 - QQ令牌 2代</figcaption>
    </figure>
<!-- raw HTML omitted -->
<figure><a class="lightgallery" href="/post_images/image-20210913164434456.jpg" title="/post_images/image-20210913164434456.jpg" data-thumbnail="/post_images/image-20210913164434456.jpg" data-sub-html="<h2>TOTP 软件生成器 - Google Authenticator</h2>">
        
    </a><figcaption class="image-caption">TOTP 软件生成器 - Google Authenticator</figcaption>
    </figure>
<!-- raw HTML omitted -->
<h2 id="32totp-的-javascript-实现">3.2、TOTP 的 JavaScript 实现</h2>
<p>TOTP 很容易写，各个语言都有实现。下面我用 JavaScript 实现<a href="https://github.com/simontabor/2fa" target="_blank" rel="noopener noreffer"><code>2fa</code></a>来演示一下真实代码。</p>
<p>首先，安装这个模块。</p>
<p><code>npm install --save 2fa</code></p>
<p>然后，生成一个32位字符的密钥。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">tfa</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;2fa&#39;</span><span class="p">);</span>

<span class="nx">tfa</span><span class="p">.</span><span class="nx">generateKey</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// b5jjo0cz87d66mhwa9azplhxiao18zlx
</span></code></pre></div><p>现在就可以生成哈希了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">tc</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span> <span class="o">/</span> <span class="mi">30</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">totp</span> <span class="o">=</span> <span class="nx">tfa</span><span class="p">.</span><span class="nx">generateCode</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">tc</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">totp</span><span class="p">);</span> <span class="c1">// 683464
</span></code></pre></div><h1 id="四总结">四、总结</h1>
<p>2FA 认证的优点在于，比单纯的密码登录安全得多。就算密码泄露，只要手机还在，账户就是安全的。各种密码破解方法，都对 2FA 认证无效。而且在完成最初的设置之后，2FA 验证器无需再与某处的服务器不间断的通讯来获取动态验证码，2FA 验证器计算动态验证码是完全可以离线的。举个比较极端的例子，你可以在飞机上使用 2FA 。</p>
<p>2FA 的缺点在于，登录多了一步，费时且麻烦，用户会感到不耐烦。而且，它也不意味着账户的绝对安全，入侵者依然可以通过盗取 cookie 或 token，劫持整个对话（session）。</p>
<p>双因素认证还有一个最大的问题，那就是帐户的恢复。</p>
<p>一旦忘记密码或者遗失手机，想要恢复登录，势必就要绕过双因素认证。当前具备 2FA 功能的各大网站给出的解决方案，普遍是提供一个<code>恢复代码</code>用来保证用户无法使用 2FA 时，仍然可以登录账号。为了避免被穷举，此<code>恢复代码</code>的长度普遍都较长，几十到上百个字符都是正常的。</p>
<p>因此，网站通常都会提醒用户保管好此<code>恢复代码</code>。</p>
<h1 id="五常用的-2fa-软件">五、常用的 2FA 软件</h1>
<ul>
<li>Google Authenticator</li>
<li>Microsoft Authenticator</li>
<li>1Password</li>
<li>authy</li>
<li>Duo Mobile</li>
<li>bitwarden</li>
<li>Aegis</li>
</ul>
<h1 id="ref">REF</h1>
<p>阮一峰 双因素认证（2FA）教程：<a href="http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html" target="_blank" rel="noopener noreffer">http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html</a></p>
<p>百度百科 - 2FA：<a href="https://baike.baidu.com/item/2FA/14695073" target="_blank" rel="noopener noreffer">https://baike.baidu.com/item/2FA/14695073</a></p>
<p>两步验证的原理是什么：<a href="https://www.bilibili.com/video/BV1Rp411f78Q" target="_blank" rel="noopener noreffer">https://www.bilibili.com/video/BV1Rp411f78Q</a></p>
<p>说说「双因素认证」：<a href="https://www.bilibili.com/read/cv2138033/" target="_blank" rel="noopener noreffer">https://www.bilibili.com/read/cv2138033/</a></p>
<p>Next ITELL YOU：<a href="https://next.itellyou.cn/Identity/Account/Manage/EnableAuthenticator" target="_blank" rel="noopener noreffer">https://next.itellyou.cn/Identity/Account/Manage/EnableAuthenticator</a></p>
<p>常用 2FA 软件：<a href="https://hostloc.com/thread-721788-4-1.html" target="_blank" rel="noopener noreffer">https://hostloc.com/thread-721788-4-1.html</a></p>]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>二叉搜索树 - 标签 - 無糖的小宇宙</title>
        <link>https://sugarless.cn/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</link>
        <description>二叉搜索树 - 标签 - 無糖的小宇宙</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jaded@foxmail.com (無糖)</managingEditor>
            <webMaster>jaded@foxmail.com (無糖)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 02 Oct 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://sugarless.cn/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html" rel="self" type="application/rss+xml" /><item>
    <title>28、剑指 Offer 36. 二叉搜索树与双向链表</title>
    <link>https://sugarless.cn/posts/series/leetcode-jianzhioffer-java/28.html</link>
    <pubDate>Sat, 02 Oct 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/series/leetcode-jianzhioffer-java/28.html</guid>
    <description><![CDATA[<h1 id="一题目" class="headerLink">
    <a href="#%e4%b8%80%e9%a2%98%e7%9b%ae" class="header-mark"></a>一、题目</h1><p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/" target="_blank" rel="noopener noreferrer">剑指 Offer 36. 二叉搜索树与双向链表</a> 难度中等</p>
<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p>
<p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p>
<a class="lightgallery" href="/post_images/image-20211012010418456.png" title="/post_images/image-20211012010418456.png" data-thumbnail="/post_images/image-20211012010418456.png">
        
    </a>
<!-- raw HTML omitted -->
<p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p>
<p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p>
<a class="lightgallery" href="/post_images/image-20211012010457456.png" title="/post_images/image-20211012010457456.png" data-thumbnail="/post_images/image-20211012010457456.png">
        
    </a>
<!-- raw HTML omitted -->
<p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p>
<p><strong>注意</strong>：本题与主站 426 题相同：<a href="https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/</a></p>
<p><strong>注意</strong>：此题对比原题有改动。</p>
<h1 id="二解法" class="headerLink">
    <a href="#%e4%ba%8c%e8%a7%a3%e6%b3%95" class="header-mark"></a>二、解法</h1><h2 id="21中序遍历" class="headerLink">
    <a href="#21%e4%b8%ad%e5%ba%8f%e9%81%8d%e5%8e%86" class="header-mark"></a>2.1、中序遍历</h2><h3 id="核心思路" class="headerLink">
    <a href="#%e6%a0%b8%e5%bf%83%e6%80%9d%e8%b7%af" class="header-mark"></a>核心思路</h3><p>本文解法基于性质：二叉搜索树的中序遍历为 <strong>递增序列</strong> 。
将 二叉搜索树 转换成一个 “排序的循环双向链表” ，其中包含三个要素：</p>
<ol>
<li><strong>排序链表</strong>： 节点应从小到大排序，因此应使用 <strong>中序遍历</strong> “从小到大”访问树的节点。</li>
<li><strong>双向链表</strong>： 在构建相邻节点的引用关系时，设前驱节点 pre 和当前节点 cur ，不仅应构建 pre.right = cur ，也应构建 cur.left = pre 。</li>
<li><strong>循环链表</strong>： 设链表头节点 <code>head</code> 和尾节点 <code>tail</code> ，则应构建 <code>head.left = tail</code> 和 <code>tail.right = head</code> 。</li>
</ol>
<a class="lightgallery" href="/post_images/image-20211012125258456.png" title="/post_images/image-20211012125258456.png" data-thumbnail="/post_images/image-20211012125258456.png">
        
    </a>
<!-- raw HTML omitted -->
<p><strong>中序遍历</strong> 为对二叉树作 “左、根、右” 顺序遍历，递归实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 打印中序遍历
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">Node</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">dfs</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span> <span class="c1">// 左
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">);</span> <span class="c1">// 根
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dfs</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span> <span class="c1">// 右
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>根据以上分析，考虑使用中序遍历访问树的各节点 cur ；并在访问每个节点时构建 cur 和前驱节点 pre 的引用指向；中序遍历完成后，最后构建头节点和尾节点的引用指向即可。</p>
<h4 id="算法流程" class="headerLink">
    <a href="#%e7%ae%97%e6%b3%95%e6%b5%81%e7%a8%8b" class="header-mark"></a>算法流程</h4><p><strong>dfs(cur): 递归法中序遍历</strong>：</p>
<ol>
<li>终止条件： 当节点 cur 为空，代表越过叶节点，直接返回；</li>
<li>递归左子树，即 dfs(cur.left) ；</li>
<li>构建链表：
<ol>
<li>当 pre 为空时： 代表正在访问链表头节点，记为 head ；</li>
<li>当 pre 不为空时： 修改双向节点引用，即 pre.right = cur ， cur.left = pre ；</li>
<li>保存 cur ： 更新 pre = cur ，即节点 cur 是后继节点的 pre ；</li>
</ol>
</li>
<li>递归右子树，即 dfs(cur.right) ；</li>
</ol>
<p><strong>treeToDoublyList(root)</strong>：</p>
<ol>
<li>特例处理： 若节点 root 为空，则直接返回；</li>
<li>初始化： 空节点 pre ；</li>
<li>转化为双向链表： 调用 dfs(root) ；</li>
<li>构建循环链表： 中序遍历完成后，head 指向头节点， pre 指向尾节点，因此修改 head 和 pre 的双向节点引用即可；</li>
<li>返回值： 返回链表的头节点 head 即可；</li>
</ol>
<h3 id="复杂度分析" class="headerLink">
    <a href="#%e5%a4%8d%e6%9d%82%e5%ba%a6%e5%88%86%e6%9e%90" class="header-mark"></a>复杂度分析</h3><p><strong>时间复杂度</strong>：O(N)，N 为二叉树的节点数，中序遍历需要访问所有节点。</p>
<p><strong>空间复杂度</strong>：O(N)，最差情况下，即树退化为链表时，递归深度达到 N，系统使用 O(N) 栈空间。</p>
<h3 id="code" class="headerLink">
    <a href="#code" class="header-mark"></a>Code</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="n">pre</span><span class="o">,</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Node</span> <span class="nf">treeToDoublyList</span><span class="o">(</span><span class="n">Node</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 中序遍历, 构建双向链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">dfs</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 此时中序遍历已经完成, head 指向头节点, pre 指向尾节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 下面进行头节点和尾节点的相互指向, 这两句的顺序也是可以颠倒的,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将头结点的 left 指向尾结点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">head</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">pre</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将尾结点的 right 指向头结点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">Node</span> <span class="n">cur</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 终止条件：当节点 cur 为空，代表越过叶节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">cur</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 直接返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 递归左子树
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">dfs</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 构建链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">pre</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 当 pre 不为空时：修改双向节点引用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 当 pre 为空时, 代表正在访问链表头节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">head</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">cur</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">pre</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 保存 cur ： 更新 pre = cur ，即节点 cur 是后继节点的 pre
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 递归右子树
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">dfs</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h1 id="ref" class="headerLink">
    <a href="#ref" class="header-mark"></a>REF</h1><p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/</a></p>
]]></description>
</item></channel>
</rss>

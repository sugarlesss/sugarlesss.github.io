<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>MySQL - 分类 - 無糖的小宇宙</title>
        <link>https://sugarless.cn/categories/mysql.html</link>
        <description>MySQL - 分类 - 無糖的小宇宙</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jaded@foxmail.com (無糖)</managingEditor>
            <webMaster>jaded@foxmail.com (無糖)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 07 Nov 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://sugarless.cn/categories/mysql.html" rel="self" type="application/rss+xml" /><item>
    <title>MySQL5.7 生产环境推荐参数配置</title>
    <link>https://sugarless.cn/posts/mysql-5.7-recommended-parameter-configuration-for-production-environments.html</link>
    <pubDate>Sat, 07 Nov 2020 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/mysql-5.7-recommended-parameter-configuration-for-production-environments.html</guid>
    <description><![CDATA[<p>隐藏在各项配置文件之后的，是 MySQL 的思想和设计方案。</p>
<p>查看当前所有配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">show</span><span class="w"> </span><span class="n">variables</span><span class="p">;</span><span class="w">
</span></code></pre></div><h1 id="一表相关">一、表相关</h1>
<h2 id="表数据独立存储">表数据独立存储</h2>
<p>表数据既可以存在共享表空间里，也可以是单独的文件。这个行为是由参数 innodb_file_per_table 控制的，从 MySQL 5.6.6 版本开始，它的默认值就是 ON 了。</p>
<p>这个参数设置为 OFF 表示的是，表的数据放在系统共享表空间，也就是跟数据字典放在一起；</p>
<p>这个参数设置为 ON 表示的是，每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中。</p>
<p>我建议你不论使用 MySQL 的哪个版本，都将这个值设置为 ON。</p>
<p>因为，一个表单独存储为一个文件更容易管理，而且在你不需要这个表的时候，通过 drop/truncate table 命令，系统就会直接删除这个文件。而如果是放在共享表空间中，即使表删掉了，空间也是不会回收的。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">innodb_file_per_table = ON
</code></pre><h1 id="二日志相关">二、日志相关</h1>
<h2 id="bin-log-格式">bin log 格式</h2>
<p>如果是使用 delete 语句误删了数据行，可以用 Flashback 工具通过闪回把数据恢复回来。Flashback 恢复数据的原理，是修改 binlog 的内容，拿回原库重放。而能够使用这个方案的前提是，需要确保以下两个配置。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">binlog_format=row
binlog_row_image=FULL
</code></pre><h2 id="bin-log-文件体积限制--自动过期">bin log 文件体积限制 / 自动过期</h2>
<p>row 格式记录的数据更完整，在数据恢复方面有极大优势，但缺点是生成的日志量大。因此需要根据业务需求和服务器配置对 binlog 设置单个文件最大体积限制和保留时长的限制。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">expire_logs_days = 30
max_binlog_size = 512M
</code></pre><h2 id="双-1-配置">双 “1” 配置</h2>
<p>一个事务完整提交前，需要等待两次刷盘，一次是 redo log（prepare 阶段），一次是 binlog。
sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p>
<p>redo log 用于保证 crash-safe 能力，innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后 redo log 数据不丢失。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">sync_binlog = 1
innodb_flush_log_at_trx_commit = 1
</code></pre><h2 id="redo-log-文件体积--个数">redo log 文件体积 / 个数</h2>
<p>利用 WAL 技术，MySQL 将随机写转换成了顺序写，大大提升了数据库的性能。但是，由此也带来了内存脏页的问题。脏页会被后台线程自动 flush，也会由于数据页淘汰而触发 flush，而刷脏页的过程由于会占用资源，可能会让你的更新和查询语句的响应时间长一些，造成性能的间歇性下降。</p>
<p>“redo log 写满了，要 flush 脏页”，这种情况是 InnoDB 要尽量避免的。因为出现这种情况的时候，整个系统就不能再接受更新了，所有的更新都必须堵住。如果你从监控上看，这时候更新数会跌为 0。
一个内存配置为 128GB、innodb_io_capacity 设置为 20000 的大规格实例，正常会建议你将 redo log 设置成 4 个 1GB 的文件。</p>
<p>这两个属性是只读的，需要通过修改配置文件并重启 MySQL 生效。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">innodb_log_file_size=512M
innodb_log_files_in_group=2
</code></pre><h1 id="三buffer-相关">三、buffer 相关</h1>
<h2 id="缓冲池大小">缓冲池大小</h2>
<p>缓冲池内存大小不够，意味着可用的数据页少，脏页比例容易接近 75%，造成性能间歇性抖动。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">innodb_buffer_pool_size=1G
</code></pre><h2 id="join-联表查询缓冲池大小">join 联表查询缓冲池大小</h2>
<p>join_buffer 的大小是由参数 join_buffer_size 设定的，默认值是 256k。如果放不下表 t1 的所有数据话，策略很简单，就是分段放。如果 join 语句较慢，有可能是因为缓冲池过小。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">join_buffer_size=32M
</code></pre><h1 id="四硬盘-io-相关">四、硬盘 IO 相关</h1>
<h2 id="io-读写能力">IO 读写能力</h2>
<p>如果没能合理地设置 innodb_io_capacity 参数，会导致一些性能问题。比如 MySQL 的写入速度很慢，TPS 很低，但是数据库主机的 IO 压力并不大。</p>
<p>如果主机磁盘用的是 SSD，但是 innodb_io_capacity 的值设置的是 300。于是，InnoDB 认为这个系统的能力就这么差，所以刷脏页刷得特别慢，甚至比脏页生成的速度还慢，这样就造成了脏页累积，影响了查询和更新性能。</p>
<p>测试完成后可以得到服务器硬盘的 IOPS，根据这个值来设置：（200 是默认值）</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">innodb_io_capacity = 200
</code></pre><p>centos 安装 fio，测试硬盘 io</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">yum install -y libaio-devel fio
<span class="nb">cd</span> /<span class="p">;</span>mkdir test<span class="p">;</span><span class="nb">cd</span> /test<span class="p">;</span>touch file<span class="p">;</span>fio -filename<span class="o">=</span>/test/file -direct<span class="o">=</span><span class="m">1</span> -iodepth <span class="m">1</span> -thread -rw<span class="o">=</span>randrw -ioengine<span class="o">=</span>psync -bs<span class="o">=</span>4k -size<span class="o">=</span>500M -numjobs<span class="o">=</span><span class="m">10</span> -runtime<span class="o">=</span><span class="m">10</span> -group_reporting -name<span class="o">=</span>mytest
</code></pre></div><p>windows 可以使用 AS SSD 软件测试 IOPS</p>
<h2 id="脏页刷写连坐机制">脏页刷写连坐机制</h2>
<p>一旦一个查询请求需要在执行过程中先 flush 掉一个脏页时，这个查询就可能要比平时慢了。而 MySQL 中的一个机制，可能让你的查询会更慢：在准备刷一个脏页的时候，如果这个数据页旁边的数据页刚好是脏页，就会把这个 “邻居” 也带着一起刷掉；而且这个把 “邻居” 拖下水的逻辑还可以继续蔓延，也就是对于每个邻居数据页，如果跟它相邻的数据页也还是脏页的话，也会被放到一起刷。在 InnoDB 中，innodb_flush_neighbors 参数就是用来控制这个行为的，值为 1 的时候会有上述的 “连坐” 机制，值为 0 时表示不找邻居，自己刷自己的。</p>
<p>找 “邻居” 这个优化在机械硬盘时代是很有意义的，可以减少很多随机 IO。机械硬盘的随机 IOPS 一般只有几百，相同的逻辑操作减少随机 IO 就意味着系统性能的大幅度提升。</p>
<p>而如果使用的是 SSD 这类 IOPS 比较高的设备的话，建议把 innodb_flush_neighbors 的值设置成 0：</p>
<p>因为这时候 IOPS 往往不是瓶颈，而 “只刷自己”，就能更快地执行完必要的刷脏页操作，减少 SQL 语句响应时间。在 MySQL 8.0 中，innodb_flush_neighbors 参数的默认值已经是 0 了。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">innodb_flush_neighbors = 0
</code></pre><h1 id="五线程相关">五、线程相关</h1>
<h2 id="并发线程上限数">并发线程上限数</h2>
<p>通常情况下，我们建议把 innodb_thread_concurrency 设置为 64~128 之间的值。并发连接和并发查询并不是同一个概念，你在 show processlist 的结果里，看到的几千个连接，指的就是并发连接。而 “当前正在执行” 的语句，才是我们所说的并发查询。</p>
<p>并发连接数达到几千个影响并不大，就是多占一些内存而已。我们应该关注的是并发查询，因为并发查询太高才是 CPU 杀手。这也是为什么我们需要设置 innodb_thread_concurrency 参数的原因。</p>
<p>在线程进入锁等待以后，并发线程的计数会减一，也就是说等行锁（也包括间隙锁）的线程是不算在 128 里面的。MySQL 这样设计是非常有意义的。因为，进入锁等待的线程已经不吃 CPU 了；更重要的是，必须这么设计，才能避免整个系统锁死。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">innodb_thread_concurrency=128
</code></pre><h1 id="六锁相关">六、锁相关</h1>
<h2 id="自增锁模式">自增锁模式</h2>
<p>MySQL 5.1.22 版本引入了一个新策略，新增参数 innodb_autoinc_lock_mode，默认值是 1。</p>
<p>这个参数的值被设置为 0 时，表示采用之前 MySQL 5.0 版本的策略，即语句执行结束后才释放锁；</p>
<p>这个参数的值被设置为 1 时：普通 insert 语句，自增锁在申请之后就马上释放；类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；</p>
<p>这个参数的值被设置为 2 时，所有的申请自增主键的动作都是申请后就释放锁。</p>
<p>在生产上，尤其是有 insert … select 这种批量插入数据的场景时，从并发插入数据性能的角度考虑，我建议你这样设置：
innodb_autoinc_lock_mode=2 ，并且 binlog_format=row. 这样做，既能提升并发性，又不会出现数据一致性问题。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">innodb_autoinc_lock_mode=2
</code></pre><h1 id="七sql-部分">七、SQL 部分</h1>
<h2 id="安全模式">安全模式</h2>
<p>为了防止忘记在 delete 或者 update 语句中写 where 条件、where 条件里面没有包含索引字段、没有加入 limit 限制引起的非安全 SQL 语句造成数据误删等，写入该配置后，这些非安全语句执行就会报错。</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">sql_safe_updates = ON
</code></pre><h1 id="配置模板">配置模板</h1>
<pre tabindex="0"><code class="language-conf" data-lang="conf">innodb_file_per_table = ON
 
binlog_format=row
binlog_row_image=FULL
 
expire_logs_days = 30
max_binlog_size = 512M
 
sync_binlog = 1
innodb_flush_log_at_trx_commit = 1
 
innodb_log_file_size=512M
innodb_log_files_in_group=2
 
innodb_buffer_pool_size=1G
join_buffer_size=32M
 
innodb_io_capacity = 300
innodb_flush_neighbors = 0
 
innodb_thread_concurrency=128
 
innodb_autoinc_lock_mode=2
</code></pre>]]></description>
</item><item>
    <title>MySQL 的常用维护语句</title>
    <link>https://sugarless.cn/posts/common-maintenance-sql-for-mysql.html</link>
    <pubDate>Thu, 05 Nov 2020 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/common-maintenance-sql-for-mysql.html</guid>
    <description><![CDATA[<p>在日常开发中遇到的一些问题。</p>
<h1 id="一查看数据库的各个表占用的文件大小">一、查看数据库的各个表占用的文件大小</h1>
<p>以查看 test 数据库为例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span><span class="w">
</span><span class="w">    </span><span class="n">table_schema</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s1">&#39;数据库&#39;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="k">table_name</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s1">&#39;表名&#39;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">engine</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s1">&#39;存储引擎&#39;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">table_comment</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s1">&#39;备注&#39;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">table_rows</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s1">&#39;记录数&#39;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="k">TRUNCATE</span><span class="w"> </span><span class="p">(</span><span class="n">data_length</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">1024</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s1">&#39;数据大小(MB)&#39;</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="k">TRUNCATE</span><span class="w"> </span><span class="p">(</span><span class="n">index_length</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">1024</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">1024</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s1">&#39;索引大小(MB)&#39;</span><span class="w">
</span><span class="w"></span><span class="k">FROM</span><span class="w">
</span><span class="w">    </span><span class="n">information_schema</span><span class="p">.</span><span class="n">TABLES</span><span class="w">
</span><span class="w"></span><span class="k">WHERE</span><span class="w">
</span><span class="w">    </span><span class="n">table_schema</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;test&#39;</span><span class="w">
</span><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w">
</span><span class="w">    </span><span class="n">table_rows</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></code></pre></div><h1 id="二查找持续时间超过-60s-的事务">二、查找持续时间超过 60s 的事务</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">information_schema</span><span class="p">.</span><span class="n">innodb_trx</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">TIME_TO_SEC</span><span class="p">(</span><span class="n">timediff</span><span class="p">(</span><span class="n">now</span><span class="p">(),</span><span class="n">trx_started</span><span class="p">))</span><span class="o">&gt;</span><span class="mi">60</span><span class="w">
</span></code></pre></div><h1 id="三查看当前线程处理情况">三、查看当前线程处理情况</h1>
<p>配套 kill 语句可以处理突发事件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">show</span><span class="w"> </span><span class="k">full</span><span class="w"> </span><span class="n">processlist</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="n">kill</span><span class="w"> </span><span class="n">Id</span><span class="p">;</span><span class="w">
</span></code></pre></div><h1 id="四优化表">四、优化表</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="n">optimize</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="o">`</span><span class="n">table_name_A</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>重新组织表数据和相关索引数据的物理存储，以减少存储空间，提高访问表时的 I/O 效率。</p>
<p>但此操作会锁表，需要避开业务高峰期。</p>
<h1 id="五重建表">五、重建表</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">alter</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">A</span><span class="w"> </span><span class="n">engine</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>试想一下，如果你现在有一个表 A，需要做空间收缩，为了把表中存在的空洞去掉，你可以怎么做呢？你可以新建一个与表 A 结构相同的表 B，然后按照主键 ID 递增的顺序，把数据一行一行地从表 A 里读出来再插入到表 B 中。由于表 B 是新建的表，所以表 A 主键索引上的空洞，在表 B 中就都不存在了。显然地，表 B 的主键索引更紧凑，数据页的利用率也更高。如果我们把表 B 作为临时表，数据从表 A 导入表 B 的操作完成后，用表 B 替换 A，从效果上看，就起到了收缩表 A 空间的作用。这里，你可以使用 alter table A engine=InnoDB 命令来重建表。在 MySQL 5.5 版本之前，这个命令的执行流程跟我们前面描述的差不多，区别只是这个临时表 B 不需要你自己创建，MySQL 会自动完成转存数据、交换表名、删除旧表的操作。</p>
<p>显然，花时间最多的步骤是往临时表插入数据的过程，如果在这个过程中，有新的数据要写入到表 A 的话，就会造成数据丢失。因此，在整个 DDL 过程中，表 A 中不能有更新。也就是说，这个 DDL 不是 Online 的。</p>
<p>而在 MySQL 5.6 版本开始引入的 Online DDL，对这个操作流程做了优化。</p>
<p>我给你简单描述一下引入了 Online DDL 之后，重建表的流程：</p>
<ul>
<li>建立一个临时文件，扫描表 A 主键的所有数据页；</li>
<li>用数据页中表 A 的记录生成 B+ 树，存储到临时文件中；</li>
<li>生成临时文件的过程中，将所有对 A 的操作记录在一个日志文件（row log）中；</li>
<li>临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表 A 相同的数据文件；</li>
<li>用临时文件替换表 A 的数据文件。</li>
</ul>
<p>可以看到，不同之处在于，由于日志文件记录和重放操作这个功能的存在，这个方案在重建表的过程中，允许对表 A 做增删改操作。这也就是 Online DDL 名字的来源。</p>
<blockquote>
<p>DDL 之前是要拿 MDL 写锁的，这样还能叫 Online DDL 吗？</p>
</blockquote>
<blockquote>
<p>alter 语句在启动的时候需要获取 MDL 写锁，但是这个写锁在真正拷贝数据之前就退化成读锁了。为什么要退化呢？为了实现 Online，MDL 读锁不会阻塞增删改操作。那为什么不干脆直接解锁呢？为了保护自己，禁止其他线程对这个表同时做 DDL。而对于一个大表来说，Online DDL 最耗时的过程就是拷贝数据到临时表的过程，这个步骤的执行期间可以接受增删改操作。所以，相对于整个 DDL 过程来说，锁的时间非常短。对业务来说，就可以认为是 Online 的。</p>
</blockquote>
<p>需要补充说明的是，上述的这些重建方法都会扫描原表数据和构建临时文件。对于很大的表来说，这个操作是很消耗 IO 和 CPU 资源的。因此，如果是线上服务，你要很小心地控制操作时间。如果想要比较安全的操作的话，我推荐你使用 GitHub 开源的 gh-ost 来做。</p>
<p>另外，使用 alter table t engine=InnoDB 有可能会让一个表占用的空间反而变大：</p>
<p>1、就是这个表本身就已经没有空洞，比如说刚刚做过一次重建表操作；</p>
<p>2、在 DDL 期间，如果刚好有外部的 DML 在执行，这期间可能会引入一些新的空洞；</p>
<p>3、在重建表的时候，InnoDB 不会把整张表占满，每个页留了 1/16 给后续的更新用。也就是说，其实重建表之后不是 “最” 紧凑的。</p>]]></description>
</item><item>
    <title>MySQL 修改默认事务隔离级别</title>
    <link>https://sugarless.cn/posts/modifying-the-mysql-default-transaction-isolation-level.html</link>
    <pubDate>Wed, 04 Nov 2020 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/modifying-the-mysql-default-transaction-isolation-level.html</guid>
    <description><![CDATA[<p>MySQL 的四种事务隔离级别 / 如何切换 MySQL 的默认全局事务隔离级别 / 了解 session 和 global 关键字</p>
<h1 id="一查看当前-mysql-版本号">一、查看当前 MySQL 版本号</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="w"> </span><span class="k">version</span><span class="p">();</span><span class="w">
</span></code></pre></div><h1 id="二查看当前全局事务隔离级别">二、查看当前全局事务隔离级别</h1>
<h2 id="21mysql56-及其更早的版本">2.1、MySQL5.6 及其更早的版本</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="w"> </span><span class="o">@@</span><span class="k">global</span><span class="p">.</span><span class="n">tx_isolation</span><span class="p">;</span><span class="w">
</span></code></pre></div><h2 id="22mysql57-及更高版本">2.2、MySQL5.7 及更高版本</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span><span class="w"> </span><span class="o">@@</span><span class="k">global</span><span class="p">.</span><span class="n">transaction_isolation</span><span class="p">;</span><span class="w">
</span></code></pre></div><p>1、MySQL5.7 引入了 transaction_isolation 用来代替 tx_isolation，并在 MySQL8.0.3 去掉了 tx_isolation，在 MySQL5.7 及更高版本中建议使用 transaction_isolation</p>
<p>2、若要查看当前会话的事务隔离级别，可以去掉 global. 使用 SELECT @@transaction_isolation。同理，若只想针对当前 session 设置事务隔离级别，可将 global 关键字替换为 session</p>
<h1 id="三mysql-的四个事务隔离级别">三、MySQL 的四个事务隔离级别</h1>
<p>|  事务隔离级别   | 脏读  | 不可重复读  | 幻读  |
|  &mdash;-  | &mdash;-  |
| 读未提交（read-uncommitted）  | 是 | 是 | 是 |
| 读提交（read-committed）  | 否 | 是 | 是 |
| 可重复读（repeatable-read）  | 否 | 否 | 是 |
| 串行化（serializable）  | 否 | 否 | 否 |</p>
<h1 id="四修改-mysql-全局默认事务隔离级别">四、修改 MySQL 全局默认事务隔离级别</h1>
<h2 id="41mysql56-及其更早的版本">4.1、MySQL5.6 及其更早的版本</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">tx_isolation</span><span class="o">=</span><span class="s1">&#39;read-uncommitted&#39;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">tx_isolation</span><span class="o">=</span><span class="s1">&#39;read-committed&#39;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">tx_isolation</span><span class="o">=</span><span class="s1">&#39;repeatable-read&#39;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">tx_isolation</span><span class="o">=</span><span class="s1">&#39;serializable&#39;</span><span class="p">;</span><span class="w">
</span></code></pre></div><h2 id="42mysql57-及更高版本">4.2、MySQL5.7 及更高版本</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">transaction_isolation</span><span class="o">=</span><span class="s1">&#39;read-uncommitted&#39;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">transaction_isolation</span><span class="o">=</span><span class="s1">&#39;read-committed&#39;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">transaction_isolation</span><span class="o">=</span><span class="s1">&#39;repeatable-read&#39;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">transaction_isolation</span><span class="o">=</span><span class="s1">&#39;serializable&#39;</span><span class="p">;</span><span class="w">
</span></code></pre></div>]]></description>
</item></channel>
</rss>

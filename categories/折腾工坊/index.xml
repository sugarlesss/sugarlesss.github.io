<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>折腾工坊 - 分类 - 無糖的小宇宙</title>
        <link>https://sugarless.cn/categories/%E6%8A%98%E8%85%BE%E5%B7%A5%E5%9D%8A.html</link>
        <description>折腾工坊 - 分类 - 無糖的小宇宙</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jaded@foxmail.com (無糖)</managingEditor>
            <webMaster>jaded@foxmail.com (無糖)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 18 Jun 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://sugarless.cn/categories/%E6%8A%98%E8%85%BE%E5%B7%A5%E5%9D%8A.html" rel="self" type="application/rss+xml" /><item>
    <title>如何有效的整理信息？</title>
    <link>https://sugarless.cn/posts/how-to-organize-information-effectively.html</link>
    <pubDate>Sat, 18 Jun 2022 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/how-to-organize-information-effectively.html</guid>
    <description><![CDATA[<p>看了那么多短视频、知乎和 B 站的你，为什么啥都没学到？</p>
<p>欢迎来到 <a href="https://sugarless.cn/categories/%e7%a7%91%e6%8a%80%e7%a0%94%e7%a9%b6%e6%89%80.html" target="_blank" rel="noopener noreffer"><strong>折腾工坊</strong></a>，我是無糖，今天我想跟你聊聊我是如何整理信息的。</p>
<p>大约在一年前，我开始学习某一领域的知识时遇到了一些问题：</p>
<ul>
<li>学习路径如此复杂，我究竟学到哪儿了？</li>
<li>每天都在学，每天都在忘，细节完全想不起来，怎么办？</li>
<li>逛知乎 / B 站时遇到不错的图文和视频我看完也收藏了，为什么要用的时候想不起来了？</li>
</ul>
<h1 id="一笔记和笔记软件的区别">一、笔记和笔记软件的区别</h1>
<p>我认为上述几个问题的本质原因是由于吸收的知识过于碎片化，无法形成知识网络，所以我既不清楚我学到了哪里，也记不住繁多的细节。所以我开始在网上寻找一些线上笔记应用来尝试解决我遇到的问题。</p>
<p>在协同办公的浪潮下，许多笔记软件也开始崭露头角，像 Notion、语雀 都是我非常喜欢的产品。在体验了一段时间之后，我觉得数字化笔记也许是一个不错的出路，所以就有了这篇文章。</p>
<p>如果你想了解一个行业或一个领域，系统化的学习是不可避免的。在这个过程中，如果没有笔记软件的帮助，我想大概率你会碰到文章开头我提到的三个问题。</p>
<p>为了让你对笔记软件有一个直观的感受，先给你看一下我是怎么做笔记的。下面是我在学习 Java 虚拟机过程中积累下来的笔记：</p>
<figure><a class="lightgallery" href="/post_images/image-20220619150109346.png" title="/post_images/image-20220619150109346.png" data-thumbnail="/post_images/image-20220619150109346.png" data-sub-html="<h2>JVM - 语雀</h2>">
        
    </a><figcaption class="image-caption">JVM - 语雀</figcaption>
    </figure>
<!-- raw HTML omitted -->
<p>对于学生时代的笔记，我认为有几个缺点：</p>
<ul>
<li><strong>难以建立目录，无法快速查找目标知识点</strong>（这几乎是致命缺点）</li>
<li><strong>信息不够丰富</strong>（不能放图）</li>
<li><strong>笔记与笔记之间难以形成关联</strong>（在无法建立目录的前提下，笔记与笔记之间就像是孤岛）</li>
<li><strong>难以修改 / 更正</strong>（你懂得）</li>
<li>写的急，字迹丑（这点是我的问题）</li>
</ul>
<p>上述几点是纸质化笔记天生的劣势，如果你的字迹比较潦草，会进一步加重反复查阅的负担，久而久之记笔记就会成为一种机械性的行为，记完再也不看。</p>
<p>笔记是为了复习服务的，而学习是需要讲究学习成效的，学习付出和收获不成正比的奇怪现象源自于只注重了付出，却没有重视付出的努力是否有效。</p>
<p>所以我认为建立一个线上知识库是相当有必要的。你记录下来的笔记，经过反复查阅后自然会沉淀为你的知识。</p>
<h1 id="二我是如何使用笔记软件的">二、我是如何使用笔记软件的？</h1>
<p>为了服务于反复查阅这个目标，我认为一个笔记软件至少要有以下几个功能</p>
<ul>
<li>知识库目录（为知识分层，将不同方向的知识归类整合）</li>
<li>文章大纲（让你在10秒内明白这篇文章大概在讲什么？快速跳转到你需要的部分）</li>
<li>文章主体（正文）</li>
</ul>
<figure><a class="lightgallery" href="/post_images/image-20220619150255671.png" title="/post_images/image-20220619150255671.png" data-thumbnail="/post_images/image-20220619150255671.png" data-sub-html="<h2>JVM - 语雀</h2>">
        
    </a><figcaption class="image-caption">JVM - 语雀</figcaption>
    </figure>
<!-- raw HTML omitted -->
<p>这是我心目中最好的三段式布局，也是我如何使用笔记软件的关键。</p>
<p>有了这样一个线上知识库，你就可以把知乎 / B 站 / 短视频里学习到的内容转移到你的笔记中，在日积月累的反复查阅中，最后成为你真正掌握的的东西。</p>
<p>你要做的只是为知识分层，然后坚持下来。</p>
<blockquote>
<p>演示软件叫语雀，是阿里系的一个笔记产品。</p>
</blockquote>
<h1 id="三写在最后">三、写在最后</h1>
<p>那么作为程序员，不整点活是不可能的。在使用了语雀一年后，我从逐渐担心语雀是否会停止运营，发展到对互联网产品的数据安全备份的不信任，所以我决定使用开源的笔记产品来代替语雀。</p>
<p>在千挑万选之后，我选择了思源笔记（<a href="https://github.com/siyuan-note/siyuan" target="_blank" rel="noopener noreffer">https://github.com/siyuan-note/siyuan</a>），数据同步我是用 Git 来完成的（我自己有 Git 私服，不需要借助 Github 和 Gitee 这样的在线托管平台）。把数据把握在自己手里，才有安全感。</p>
<p>我们没有必要追求极致的效率，只是不希望把大量的时间浪费在无谓的事情上，剩下来的时间用来好好生活不是更好吗。</p>
<p>每种工具和方法的探索都源自于需求，所以我们可能没办法套用别人的经验。我们需要自己做出适当的调整，而如何调整需要我们对自己有更清楚的认知，对工具和方法有深入的了解，很多问题只能在尝试过程中才能理解，在讨论中才能辨明。</p>
<p>我们常常在一款工具用得不顺手的时候，才能更真切得体会到自己的发力习惯，然后决定去改变自己还是更换工具。</p>
<p>体会和理解工具的过程，也是调整我们对自己认知的过程，找到自己的节奏就好。</p>]]></description>
</item><item>
    <title>如何拥有一个属于自己的 Github ？</title>
    <link>https://sugarless.cn/posts/how-to-build-a-private-git-server-with-gogs.html</link>
    <pubDate>Tue, 30 Nov 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/how-to-build-a-private-git-server-with-gogs.html</guid>
    <description><![CDATA[<p>自建 Git Server 有什么用？不用再忍受 Github 龟速网、无限数量私有库、数据不用托管在 Github 上，自己说了算。</p>
<p>本文会以 CentOS7 + Nginx + Gogs 为例，教你如何安装配置，拥有一个属于自己的 “Github” 。</p>
<h1 id="github-的过去">Github 的过去</h1>
<p>自从 GitHub 在 2018 年被微软收购后，每个账号都能免费创建 5 个私有库了，当时非常高兴，觉得 Github 有微软在背后站台，未来可期。但 3 年后却发生了一件事，又一次提醒了我，原来 Github 已经被资本收购了。</p>
<p>2021 年 7 月，由微软、OpenAI、GitHub 联合出品的自动代码生成 AI - Copilot 在推出后的第二天就深陷侵犯版权的质疑声中，惨遭开源社区网友炮轰。为了训练 Copilot ，GitHub 官方确认了他们会使用所有 GitHub 公开代码来训练 Copilot，并且不区分 License 类别。而在之前，明明官方有过 “Copilot是在GPL代码的基础上训练出来的” 这种说法，但之后 GitHub 的 CEO 又表示：&ldquo;每天都有数百名 GitHub 的开发者在使用 Copilot ，如果预览版进展顺利的话，我们将计划在未来某个时候将其扩展为付费产品。&quot;，完全就是一副视 General Public License 如无物的样子。</p>
<p>富人和大公司带头冲版权，一边冲一边告诉大众，你们要遵守版权，不可以学我。（哄堂大笑</p>
<h1 id="why-gogs-">Why Gogs ？</h1>
<p>大公司普遍使用的是内部开发的 Git Server，像我们这样的个人开发者，选择一个开源 Git Server 自行搭建是比较适合的。</p>
<p>我知道有几个不错的开源 Git Server 可以考虑：</p>
<ul>
<li>GitLab</li>
<li>Gogs</li>
<li>Gitea</li>
<li>GitStack</li>
</ul>
<p>最终，我选择 Gogs 的主要原因是它资源占用极低，你甚至可以用树莓派来搭建一个 Gogs，1C2G 的配置轻轻松松带 Gogs。</p>
<p>比之 GitLab，Gogs 在资源占用和性能上的优势是非常明显的，因此它非常适合在硬件配置不高的服务器搭建。</p>
<p>官网：<a href="https://gogs.io" target="_blank" rel="noopener noreffer">https://gogs.io</a></p>
<p>演示站：<a href="https://try.gogs.io/" target="_blank" rel="noopener noreffer">https://try.gogs.io/</a></p>
<p>Github：<a href="https://github.com/gogs/gogs" target="_blank" rel="noopener noreffer">https://github.com/gogs/gogs</a></p>
<h1 id="一安装-gogs">一、安装 Gogs</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">adduser git <span class="c1">#创建用户 git</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">passwd git <span class="c1">#设置git用户的密码</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">groupadd git <span class="c1">#创建用户组 git</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">usermod -G git git <span class="c1">#将git用户添加到git用户组中</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">su git <span class="c1">#切换到git用户shell</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~ <span class="c1">#进入/home/git</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">wget https://dl.gogs.io/0.12.3/gogs_0.12.3_linux_amd64.zip <span class="c1">#下载gogs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">unzip gogs_0.12.3_linux_amd64.zip <span class="c1">#解压gogs压缩包</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">su <span class="c1">#切回root用户</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /home/git/gogs/scripts/systemd/gogs.service /usr/lib/systemd/system/ <span class="c1">#复制service文件</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> gogs.service <span class="c1">#启用gogs服务（开机自启）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl start gogs <span class="c1">#启动gogs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl status gogs <span class="c1">#查看gogs运行状态</span>
</span></span></code></pre></div><p>安装完成后，就可以用访问 http://ip:3000 配置 Gogs 了，不过我建议你别急着填下面的配置，先把 SSL 证书搞定，接着往下看吧。</p>
<blockquote>
<p>如果无法访问，说明服务器入方向的 3000 端口没有打开。</p>
<ul>
<li>
<p>请在服务器供应商（如阿里云或腾讯云等）提供的控制面板设置对应的 防火墙/安全组 规则，开放入方向的 3000 端口。</p>
</li>
<li>
<p>如果你使用了类似于宝塔之类的控制面板，请检查面板防火墙中是否中开放了 3000 端口。</p>
</li>
</ul>
</blockquote>
<a class="lightgallery" href="/post_images/image-20211130223902655.png" title="/post_images/image-20211130223902655.png" data-thumbnail="/post_images/image-20211130223902655.png">
        
    </a>
<!-- raw HTML omitted -->
<h1 id="二配置域名与https">二、配置域名与HTTPS</h1>
<h2 id="21配置域名访问">2.1、配置域名访问</h2>
<p>将域名解析到服务器 IP 上，在 Nginx 配置文件中新增如下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">git.yourdomain.com</span><span class="p">;</span> <span class="c1"># 域名修改为你自己的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://localhost:3000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kn">access_log</span>  <span class="s">/www/wwwlogs/yourdomain.access.log</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">error_log</span>  <span class="s">/www/wwwlogs/yourdomain.error.log</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这样就可以通过 HTTP 的方式访问 Gogs 了：http://git.yourdomain.com 。</p>
<p>我们接着配置 SSL 证书，先不急着填写 Gogs 的配置，直接一步到位。</p>
<a class="lightgallery" href="/post_images/image-20211130232845697.png" title="/post_images/image-20211130232845697.png" data-thumbnail="/post_images/image-20211130232845697.png">
        
    </a>
<!-- raw HTML omitted -->
<h2 id="22配置-ssl-证书">2.2、配置 SSL 证书</h2>
<p>你可以按照下面的 Nginx 配置为模板，来配置你的 Gogs 站点。</p>
<p>根据你的需求，你可以自由选择是否强制 HTTPS。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span> <span class="s">http2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">git.yourdomain.com</span><span class="p">;</span> <span class="c1"># 域名修改为你自己的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>    <span class="s">/xxx/xxx/xxx.pem</span><span class="p">;</span> <span class="c1"># 证书修改为你自己的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kn">ssl_certificate_key</span>    <span class="s">/xxx/xxx/xxx.pem</span><span class="p">;</span> <span class="c1"># 证书修改为你自己的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kn">ssl_protocols</span> <span class="s">TLSv1.1</span> <span class="s">TLSv1.2</span> <span class="s">TLSv1.3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span> <span class="s">EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span> <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span> <span class="s">shared:SSL:10m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span> <span class="mi">10m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">add_header</span> <span class="s">Strict-Transport-Security</span> <span class="s">&#34;max-age=31536000&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">    <span class="c1"># HTTP 重定向到 HTTPS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1"># if ($server_port !~ 443){
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">#     rewrite ^(/.*)$ https://$host$1 permanent;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1"># }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1"># error_page 497  https://$host$request_uri;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="c1"># 反向代理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://localhost:3000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#禁止访问的文件或目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kn">location</span> <span class="p">~</span> <span class="sr">^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">return</span> <span class="mi">404</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">access_log</span>  <span class="s">/www/wwwlogs/yourdomain.access.log</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">error_log</span>  <span class="s">/www/wwwlogs/yourdomain.error.log</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>配置完成后，你就可以通过 HTTPS 的方式访问 Gogs 了：https://git.yourdomain.com</p>
<a class="lightgallery" href="/post_images/image-20211130233728858.png" title="/post_images/image-20211130233728858.png" data-thumbnail="/post_images/image-20211130233728858.png">
        
    </a>
<!-- raw HTML omitted -->
<p>现在我们可以开始填写 Gogs 的配置了。</p>
<h1 id="三配置-gogs">三、配置 Gogs</h1>
<p>此时我们已经配置好了 HTTPS 访问，那么在配置 Gogs 中有几处域名的设置需要注意。下面是一份样例配置，几处需要注意的域名我用红框标注出来了。</p>
<a class="lightgallery" href="/post_images/image-20211130235300442.png" title="/post_images/image-20211130235300442.png" data-thumbnail="/post_images/image-20211130235300442.png">
        
    </a>
<!-- raw HTML omitted -->
<p>填写完配置后，点击立即安装，就完成了。</p>
<a class="lightgallery" href="/post_images/image-20211130235544814.png" title="/post_images/image-20211130235544814.png" data-thumbnail="/post_images/image-20211130235544814.png">
        
    </a>
<!-- raw HTML omitted -->
<p>那么剩下的就跟 Github 一样，添加 SSH Key 到自己的账户中，就可以愉快建库冲浪了。</p>
<blockquote>
<p>Gogs 除了安装引导中的配置项，其实还有不少额外的配置。</p>
<p>在 <code>custom/conf/app.ini</code> 文件中修改相应配置项的值即可。</p>
<p>完整配置项样例：https://github.com/gogs/gogs/blob/main/conf/app.ini</p>
<p>旧版本配置文件手册参考（中文）：https://www.bookstack.cn/read/gogs_zh/advanced-configuration_cheat_sheet.md</p>
</blockquote>
<h1 id="ref">REF</h1>
<p><a href="https://gogs.io/docs/installation/install_from_binary" target="_blank" rel="noopener noreffer">https://gogs.io/docs/installation/install_from_binary</a></p>
<p><a href="https://gogs.io/docs/installation/configuration_and_run" target="_blank" rel="noopener noreffer">https://gogs.io/docs/installation/configuration_and_run</a></p>
<p><a href="https://www.zhihu.com/question/283143882/answer/434872781" target="_blank" rel="noopener noreffer">https://www.zhihu.com/question/283143882/answer/434872781</a></p>
<p><a href="https://www.bookstack.cn/read/gogs_zh/advanced-configuration_cheat_sheet.md" target="_blank" rel="noopener noreffer">https://www.bookstack.cn/read/gogs_zh/advanced-configuration_cheat_sheet.md</a></p>]]></description>
</item><item>
    <title>内存盘能为我们带来什么惊喜？</title>
    <link>https://sugarless.cn/posts/using-ram-disks-to-speed-up-your-system.html</link>
    <pubDate>Sun, 21 Nov 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/using-ram-disks-to-speed-up-your-system.html</guid>
    <description><![CDATA[<p>作为硬盘来说，SSD 已经很快了，但内存更快。</p>
<p>本文简单介绍一下使用内存盘为系统加速的几种姿势。</p>
<h1 id="一内存盘是什么">一、内存盘是什么？</h1>
<p>内存盘即 RAM Disk，市面上实现 RAM Disk 的软件有很多，其主要功能是通过独特的软件算法将物理内存模拟成一个虚拟硬盘，在这个虚拟硬盘上的读写操作均在内存中完成。由于内存的读写速度远超硬盘（ HDD 与 SSD ），因此这个虚拟硬盘具有非常高的数据读写速度。</p>
<h1 id="二比-ssd-更优秀的读写性能">二、比 SSD 更优秀的读写性能</h1>
<p>在使用内存盘为系统加速之前，我想先向你展示一下内存盘（RAM Disk）与固态硬盘（Solid State Disk - SSD）之间的读写速度差距有多大。</p>
<p>这是三星 970 EVO Plus 1TB 的读写速度：</p>
<figure><a class="lightgallery" href="/post_images/image-20211120164509057.png" title="/post_images/image-20211120164509057.png" data-thumbnail="/post_images/image-20211120164509057.png" data-sub-html="<h2>三星 970 EVO Plus 1TB</h2>">
        
    </a><figcaption class="image-caption">三星 970 EVO Plus 1TB</figcaption>
    </figure>
<!-- raw HTML omitted -->
<p>这是 4GB 内存盘的读写速度：</p>
<figure><a class="lightgallery" href="/post_images/image-20211121231824469.png" title="/post_images/image-20211121231824469.png" data-thumbnail="/post_images/image-20211121231824469.png" data-sub-html="<h2>4GB 内存盘</h2>">
        
    </a><figcaption class="image-caption">4GB 内存盘</figcaption>
    </figure>
<!-- raw HTML omitted -->
<p>从 CrystalDiskMark 给出的测试数据看，即便是与三星 970 EVO Plus 1T 这种中高端 SSD 相比，内存盘的性能依然是令人惊叹的。</p>
<p>4K 随机读写性能：</p>
<ul>
<li>单线程 4K 读：提升了 18 倍；</li>
<li>单线程 4K 写：提升了 6 倍；</li>
<li>读 - 访问时间：降低至 5%；</li>
<li>写 - 访问时间：降低至 16%；</li>
</ul>
<p>顺序读写性能：</p>
<ul>
<li>单线程顺序读：提升了 6 倍；</li>
<li>单线程顺序写：提升了 3 倍；</li>
</ul>
<h1 id="三内存盘能用来存什么">三、内存盘能用来存什么？</h1>
<p>由于内存盘是使用物理内存模拟成一个虚拟硬盘，所以该虚拟硬盘的容量受限于内存大小。你可以根据自己的应用场景来设置内存盘的大小，一般来说 512M ~ 4G 左右较为合适。</p>
<p>你大概率是不可能往内存盘里写入大体积文件的（例如电影或几个 G 大小的压缩包等），因此内存盘的顺序读写性能带来的提升其实你感知不到，所以内存盘其强大的 4K 随机读写性能才是我们应该关注的重点。</p>
<p>好了，现在我们知道内存盘的特点了：</p>
<ul>
<li>容量较小</li>
<li>4K 随机读写性能强大</li>
</ul>
<p>那么将其作为缓存空间使用就再合适不过了。</p>
<blockquote>
<p>需要注意的是，下面的几个应用场景中的附带截图， G 盘是内存盘。</p>
</blockquote>
<h2 id="31windows-临时文件">3.1、Windows 临时文件</h2>
<p>我将 Windows 临时文件夹设置在内存盘中，这样可以直接为操作系统加速。</p>
<a class="lightgallery" href="/post_images/image-20211122003408522.png" title="/post_images/image-20211122003408522.png" data-thumbnail="/post_images/image-20211122003408522.png">
        
    </a>
<!-- raw HTML omitted -->
<h2 id="32浏览器缓存">3.2、浏览器缓存</h2>
<p>浏览器加载页面时会向缓存目录中写入大量小文件，而且浏览器还是日常高频使用的软件，非常适合使用内存盘加速。</p>
<p>如果你使用的是 Chrome 或 Edge ，想要修改缓存目录就有些麻烦了。其他浏览器基本都是支持自定义缓存目录的。</p>
<p>以 Edge 为例，输入 <code>edge://version/</code> 命令，找到配置文件目录：</p>
<blockquote>
<p>Chrome 浏览器输入：<code>chrome://version/</code></p>
</blockquote>
<a class="lightgallery" href="/post_images/image-20211122004149122.png" title="/post_images/image-20211122004149122.png" data-thumbnail="/post_images/image-20211122004149122.png">
        
    </a>
<!-- raw HTML omitted -->
<p>进入该目录后，删除 <code>Cache</code>  这个原缓存文件夹，打开 CMD（以管理员身份运行），使用 Mklink 命令建立原缓存目录与新缓存目录（位于内存盘中）的软连接。</p>
<a class="lightgallery" href="/post_images/image-20211122003931961.png" title="/post_images/image-20211122003931961.png" data-thumbnail="/post_images/image-20211122003931961.png">
        
    </a>
<!-- raw HTML omitted -->
<h2 id="33ide">3.3、IDE</h2>
<p>虽然普通用户会从将浏览器缓存和 Windows 临时文件转移到内存盘中受益，但 IT 专业人士可能会发现内存盘更多的优势。</p>
<p>例如，程序员可以通过将中间编译器输出重定向到内存盘来加速开发过程，数据库管理员可以通过使用内存盘来提高性能，如 tempdb，等等。</p>
<p>我做 Java 后端开发的，平时使用 jetbrains 家的 IntelliJ IDEA 编译器作为日常开发工具。</p>
<p>于是乎我直接把整个 idea 装到内存盘里去了&hellip; 无论是启动 idea、编译或运行项目，基本都要比原来快一截。</p>
<a class="lightgallery" href="/post_images/image-20211122152001707.png" title="/post_images/image-20211122152001707.png" data-thumbnail="/post_images/image-20211122152001707.png">
        
    </a>
<!-- raw HTML omitted -->
<a class="lightgallery" href="/post_images/image-20211122005905404.png" title="/post_images/image-20211122005905404.png" data-thumbnail="/post_images/image-20211122005905404.png">
        
    </a>
<!-- raw HTML omitted -->
<blockquote>
<p>如果你不做额外设置的话，内存盘里的数据在重启系统后全部丢失，安装在内存盘的软件也会随之消失。</p>
<p>因此，你如果需要重启电脑后保留内存盘里数据，你需要做一些额外设置，市面上的 RAM Disk 软件基本都支持这个功能。</p>
</blockquote>
<p>是的，我把 VS Code 也装内存盘里了。</p>
<a class="lightgallery" href="/post_images/image-20211122010558738.png" title="/post_images/image-20211122010558738.png" data-thumbnail="/post_images/image-20211122010558738.png">
        
    </a>
<!-- raw HTML omitted -->
<h1 id="四ram-disk-软件推荐">四、RAM Disk 软件推荐</h1>
<p>我个人比较推荐你使用 SoftPerfect RAM Disk，特点是界面简洁，性能好。</p>
<p>官网：<a href="https://www.softperfect.com/products/ramdisk/" target="_blank" rel="noopener noreffer">https://www.softperfect.com/products/ramdisk/</a></p>
<p>度盘：<a href="https://pan.baidu.com/s/1z9elPiX103hloTwXj-NW5w" target="_blank" rel="noopener noreffer">https://pan.baidu.com/s/1z9elPiX103hloTwXj-NW5w</a> 提取码：kcik</p>
<h1 id="五测试环境补充">五、测试环境补充</h1>
<h2 id="51鲁大师硬件参数">5.1、鲁大师硬件参数</h2>
<a class="lightgallery" href="/post_images/image-20211121233834567.png" title="/post_images/image-20211121233834567.png" data-thumbnail="/post_images/image-20211121233834567.png">
        
    </a>
<!-- raw HTML omitted -->
<a class="lightgallery" href="/post_images/image-20211121234128545.png" title="/post_images/image-20211121234128545.png" data-thumbnail="/post_images/image-20211121234128545.png">
        
    </a>
<!-- raw HTML omitted -->
<h2 id="52aida64-cache--memory-benchmark">5.2、AIDA64 Cache &amp; Memory Benchmark</h2>
<a class="lightgallery" href="/post_images/image-20211121233725089.png" title="/post_images/image-20211121233725089.png" data-thumbnail="/post_images/image-20211121233725089.png">
        
    </a>
<!-- raw HTML omitted -->
<h1 id="ref">REF</h1>
<ul>
<li><a href="https://www.romexsoftware.com/zh-cn/primo-ramdisk/overview.html" target="_blank" rel="noopener noreffer">https://www.romexsoftware.com/zh-cn/primo-ramdisk/overview.html</a></li>
<li><a href="https://www.softperfect.com/products/ramdisk/" target="_blank" rel="noopener noreffer">https://www.softperfect.com/products/ramdisk/</a></li>
</ul>]]></description>
</item><item>
    <title>关于音视频文案提取</title>
    <link>https://sugarless.cn/posts/about-extract-copywriting-from-audio-or-video.html</link>
    <pubDate>Sat, 17 Jul 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/about-extract-copywriting-from-audio-or-video.html</guid>
    <description><![CDATA[<p>长时间的电话 / 会议录音 / 演讲视频之类的各种音视频媒体文件的信息，如果有长期存储的需求的话，你可能会因为体积积太大，不方便进行信息检索而头疼。但如果转成文字，润色后整理成文字稿，无论是从存储体积或是信息检索方面，都会比直接存储音视频媒体更方便些。</p>
<p>尝遍了市面上各种音频转文字的野鸡产品后，我最终还是选择用大厂提供的 API ，to B 的产品在价格和可定制性上肯定比 to C 的产品更有优势。</p>
<p>关于如何将视频转音频，手段很多，比如使用 FFmpeg 可以将视频转为音频：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ffmpeg -i input.mp4 -vn -acodec copy audio.mp3
</span></span></code></pre></div><h1 id="一音频转文字究竟有多贵">一、音频转文字究竟有多贵？</h1>
<p>参考当前的大型互联网厂商提供的音频转文字服务定价，讯飞最贵、百度云论单价虽然最便宜，但起购门槛金额较高，比较适合商用走量、，腾讯云的价格最合适，而且最关键的是腾讯云每月都有附赠一定量的额度，可以无限白嫖。</p>
<h2 id="11讯飞">1.1、讯飞</h2>
<p>语音转写：<a href="https://www.xfyun.cn/services/lfasr" target="_blank" rel="noopener noreffer">文档地址</a></p>
<p>产品价格：<a href="https://www.xfyun.cn/services/lfasr#anchor4503211" target="_blank" rel="noopener noreffer">文档地址</a></p>
<ul>
<li>套餐一（ 20 小时） 168 元 / 单价 8.4</li>
<li>套餐二（ 200 小时） 980 元 / 单价 4.9</li>
<li>套餐三（ 1000 小时） 3900 元 / 单价 3.9</li>
<li>套餐四（ 3000 小时） 10500 元 / 单价 3.5</li>
</ul>
<h2 id="12百度云">1.2、百度云</h2>
<p>音频文件转写：<a href="https://ai.baidu.com/tech/speech/aasr" target="_blank" rel="noopener noreffer">文档地址</a></p>
<p>按小时包预付费：<a href="https://ai.baidu.com/ai-doc/SPEECH/Jk38lxn2j#%e6%8c%89%e5%b0%8f%e6%97%b6%e5%8c%85%e9%a2%84%e4%bb%98%e8%b4%b9-1" target="_blank" rel="noopener noreffer">文档地址</a></p>
<p>按调用时长后付费：<a href="https://ai.baidu.com/ai-doc/SPEECH/Jk38lxn2j#%e6%8c%89%e8%b0%83%e7%94%a8%e6%97%b6%e9%95%bf%e5%90%8e%e4%bb%98%e8%b4%b9-1" target="_blank" rel="noopener noreffer">文档地址</a></p>
<p>按小时包预付费</p>
<ul>
<li>套餐一（ 1000 小时） 1200 元 / 单价 1.2</li>
<li>套餐二（ 10000 小时） 9000 元 / 单价 0.9</li>
<li>套餐三（ 100000 小时） 70000 元 / 单价 0.7</li>
<li>套餐四（ 500000 小时） 300000 元 / 单价 0.6</li>
</ul>
<p>按调用时长后付费</p>
<ul>
<li>每小时 2 元，系统按用户实际使用，每小时出账单实时扣费，账户内需保留足量余额。</li>
</ul>
<h2 id="13腾讯云">1.3、腾讯云</h2>
<p>语音识别 ASR：<a href="https://cloud.tencent.com/product/asr" target="_blank" rel="noopener noreffer">https://cloud.tencent.com/product/asr</a></p>
<p>免费配额：<a href="https://console.cloud.tencent.com/asr/resourcebundle" target="_blank" rel="noopener noreffer">https://console.cloud.tencent.com/asr/resourcebundle</a></p>
<p>资源包购买地址：<a href="https://buy.cloud.tencent.com/asr" target="_blank" rel="noopener noreffer">https://buy.cloud.tencent.com/asr</a></p>
<p>录音文件识别（五小时内出结果）</p>
<ul>
<li>套餐一（ 60 小时） 90 元 / 单价 1.5</li>
<li>套餐二（ 1000 小时） 1200 元 / 单价 1.2</li>
<li>套餐三（ 10000 小时） 10000 元 / 单价 1</li>
<li>套餐四（ 100000 小时） 80000 元 / 单价 0.8</li>
<li>套餐五（ 300000 小时） 210000 元 / 单价 0.7</li>
</ul>
<blockquote>
<p>支持中文普通话、英语、粤语、日语、泰语。对时长5小时以内的录音文件进行识别，异步返回识别全部结果。<br>
支持语音 URL 和本地语音文件两种请求方式。<br>
语音 URL 的音频时长不能长于5小时，文件大小不超过512MB。<br>
本地语音文件不能大于5MB。<br>
提交录音文件识别请求后，在5小时内完成识别（半小时内发送超过1000小时录音或者2万条识别任务的除外），识别结果在服务端可保存7天
支持回调或轮询的方式获取结果</p>
</blockquote>
<p>录音文件识别极速版（准实时）</p>
<ul>
<li>套餐一（ 30 小时） 72 元 / 单价 2.3</li>
<li>套餐二（ 1000 小时） 1500 元 / 单价 1.5</li>
<li>套餐三（ 10000 小时） 12000 元 / 单价 1.2</li>
<li>套餐四（ 100000 小时） 110000 元 / 单价 1.1</li>
<li>套餐五（ 300000 小时） 300000 元 / 单价 1</li>
</ul>
<blockquote>
<p>仅支持中文普通话，使用者通过 HTTPS POST 方式上传一段音频并在极短时间内同步返回识别结果，可满足音视频字幕、准实时质检等场景下对语音文件识别时效性的要求。<br>
支持100MB以内音频文件的识别</p>
</blockquote>
<h2 id="14阿里云">1.4、阿里云</h2>
<p>录音文件识别：<a href="https://ai.aliyun.com/nls/filetrans?spm=a2c4g.11186623.J_8058803260.284.45d233bfK47pu0" target="_blank" rel="noopener noreffer">文档地址</a></p>
<p>录音文件识别资源包：<a href="https://common-buy.aliyun.com/?spm=5176.12157752.J_5253785160.4.5076424cS27Oad&amp;commodityCode=nlsfilebag#/buy" target="_blank" rel="noopener noreffer">购买链接</a></p>
<p>录音文件识别（极速版）资源包：<a href="https://common-buy.aliyun.com/?spm=5176.12157752.J_5253785160.5.5076424cS27Oad&amp;&amp;commodityCode=nls_rfrhsv_bag#/buy" target="_blank" rel="noopener noreffer">购买链接</a></p>
<p>录音文件识别（六小时内出结果）</p>
<ul>
<li>套餐一（ 40 小时） 100 元 / 单价 2.5</li>
<li>套餐二（ 1000 小时） 1200 元 / 单价 1.2</li>
<li>套餐三（ 20000 小时） 20000 元 / 单价 1</li>
<li>套餐四（ 100000 小时） 90000 元 / 单价 0.9</li>
<li>套餐五（ 250000 小时） 200000 元 / 单价 0.8</li>
</ul>
<p>录音文件识别极速版（30分钟以内时长的音频转写完成时间不超过10秒）</p>
<ul>
<li>套餐一（ 40 小时） 90 元 / 单价 2.5</li>
<li>套餐二（ 1000 小时） 1560 元 / 单价 1.56</li>
<li>套餐三（ 20000 小时） 26000 元 / 单价 1.3</li>
<li>套餐四（ 100000 小时） 117000 元 / 单价 1.17</li>
<li>套餐五（ 250000 小时） 260000  元 / 单价 1.04</li>
</ul>
<h1 id="二对接腾讯云">二、对接腾讯云</h1>
<p>在使用腾讯云 API 之前，你需要先获取三个必要的参数。</p>
<ul>
<li>在腾讯云控制台账号信息页面查看账号 APPID：<a href="https://console.cloud.tencent.com/developer" target="_blank" rel="noopener noreffer">https://console.cloud.tencent.com/developer</a></li>
<li>访问管理页面获取 SecretID 和 SecretKey：<a href="https://console.cloud.tencent.com/cam/capi" target="_blank" rel="noopener noreffer">https://console.cloud.tencent.com/cam/capi</a></li>
</ul>
<h2 id="21录音文件识别极速版v2">2.1、录音文件识别极速版（V2）</h2>
<p>极速版演示，目前腾讯云给的免费配额是每月 5 小时。</p>
<p>极速版仅支持中文普通话，通过 HTTPS POST 方式上传一段音频并在极短时间内同步返回识别结果，可满足音视频字幕、准实时质检等场景下对语音文件识别时效性的要求。支持100MB以内音频文件的识别。</p>
<p>1）将真实的值填入下方源代码的 APPID、SECRET_ID、SECRET_KEY 这三个参数中；</p>
<p>2）将源代码中的 audio 参数修改为本地音频文件的相对或绝对路径；</p>
<p>3）run it。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 录音文件识别极速版 v2版本</span>
</span></span><span class="line"><span class="cl"><span class="c1"># API 文档：https://cloud.tencent.com/document/api/1093/52097</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 签名生成：https://cloud.tencent.com/document/api/1093/52097#sign</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hmac</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">base64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 调用者身份</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Credential</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">app_id</span><span class="p">,</span> <span class="n">secret_id</span><span class="p">,</span> <span class="n">secret_key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">app_id</span> <span class="o">=</span> <span class="n">app_id</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">secret_id</span> <span class="o">=</span> <span class="n">secret_id</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">secret_key</span> <span class="o">=</span> <span class="n">secret_key</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 服务端信息</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Server</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">protocol</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">uri</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">protocol</span> <span class="o">=</span> <span class="n">protocol</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">host</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">port</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">uri</span> <span class="o">=</span> <span class="n">uri</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 打印日志</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="nb">object</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="s2">&#34;INFO&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;[&#34;</span> <span class="o">+</span> <span class="n">level</span> <span class="o">+</span> <span class="s2">&#34;] &#34;</span> <span class="o">+</span> <span class="n">title</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 获取时间戳</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">getTimestamp</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return t # 原始时间数据</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>  <span class="c1"># 秒级时间戳</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return int(round(t * 1000))  # 毫秒级时间戳</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return int(round(t * 1000000))  # 微秒级时间戳</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 字典序排序</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">format_sign_string</span><span class="p">(</span><span class="n">param</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">param</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">param</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">signstr</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;POST</span><span class="si">{</span><span class="n">server</span><span class="o">.</span><span class="n">host</span> <span class="o">+</span> <span class="n">server</span><span class="o">.</span><span class="n">uri</span> <span class="o">+</span> <span class="n">credential</span><span class="o">.</span><span class="n">app_id</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">param</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="s1">&#39;appid&#39;</span> <span class="ow">in</span> <span class="n">t</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">signstr</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="n">signstr</span> <span class="o">+=</span> <span class="s2">&#34;?&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">param</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">tmp</span> <span class="o">=</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="s1">&#39;appid&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tmp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">signstr</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">signstr</span> <span class="o">+=</span> <span class="s2">&#34;=&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">signstr</span> <span class="o">=</span> <span class="n">signstr</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">signstr</span> <span class="o">+=</span> <span class="s2">&#34;&amp;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">signstr</span> <span class="o">=</span> <span class="n">signstr</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">signstr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 签名</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sign</span><span class="p">(</span><span class="n">signstr</span><span class="p">,</span> <span class="n">secret_key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">hmacstr</span> <span class="o">=</span> <span class="n">hmac</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">secret_key</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                       <span class="n">signstr</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">),</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">hmacstr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 调用者信息对象初始化</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 在腾讯云控制台账号信息页面查看账号 APPID：https://console.cloud.tencent.com/developer</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 访问管理页面获取 SecretID 和 SecretKey：https://console.cloud.tencent.com/cam/capi</span>
</span></span><span class="line"><span class="cl"><span class="n">APPID</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">SECRET_ID</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">credential</span> <span class="o">=</span> <span class="n">Credential</span><span class="p">(</span><span class="n">APPID</span><span class="p">,</span> <span class="n">SECRET_ID</span><span class="p">,</span> <span class="n">SECRET_KEY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 服务端信息对象初始化</span>
</span></span><span class="line"><span class="cl"><span class="n">PROTOCOL</span> <span class="o">=</span> <span class="s2">&#34;https://&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">HOST</span> <span class="o">=</span> <span class="s2">&#34;asr.cloud.tencent.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">PORT</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">URI</span> <span class="o">=</span> <span class="s2">&#34;/asr/flash/v1/&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">server</span> <span class="o">=</span> <span class="n">Server</span><span class="p">(</span><span class="n">PROTOCOL</span><span class="p">,</span> <span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">,</span> <span class="n">URI</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 构造参数</span>
</span></span><span class="line"><span class="cl"><span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 用户在腾讯云注册账号 AppId 对应的 SecretId</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;secretid&#34;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">credential</span><span class="o">.</span><span class="n">secret_id</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 引擎模型类型。8k_zh：8k 中文普通话通用；16k_zh：16k 中文普通话通用；16k_zh_video：16k 音视频领域。</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;engine_type&#34;</span><span class="p">:</span> <span class="s2">&#34;16k_zh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 音频格式。支持 wav、pcm、ogg-opus、speex、silk、mp3、m4a、aac。</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;voice_format&#34;</span><span class="p">:</span> <span class="s2">&#34;mp3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 当前 UNIX 时间戳，如果与当前时间相差超过3分钟，会报签名失败错误。</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;timestamp&#34;</span><span class="p">:</span> <span class="n">getTimestamp</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 是否开启说话人分离（目前支持中文普通话引擎），默认为0，0：不开启，1：开启。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># params[&#34;speaker_diarization&#34;] = 0;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 是否过滤脏词（目前支持中文普通话引擎），默认为0。0：不过滤脏词；1：过滤脏词；2：将脏词替换为 *。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># params[&#34;filter_dirty&#34;] = 0;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 是否过滤语气词（目前支持中文普通话引擎），默认为0。0：不过滤语气词；1：部分过滤；2：严格过滤。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># params[&#34;filter_modal&#34;] = 0;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 是否过滤标点符号（目前支持中文普通话引擎），默认为0。0：不过滤，1：过滤句末标点，2：过滤所有标点。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># params[&#34;filter_punc&#34;] = 0;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 是否进行阿拉伯数字智能转换，默认为1。0：全部转为中文数字；1：根据场景智能转换为阿拉伯数字。</span>
</span></span><span class="line"><span class="cl"><span class="n">params</span><span class="p">[</span><span class="s2">&#34;convert_num_mode&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 是否显示词级别时间戳，默认为0。0：不显示；1：显示，不包含标点时间戳，2：显示，包含标点时间戳。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># params[&#34;word_info&#34;] = 0;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 是否只识别首个声道，默认为1。0：识别所有声道；1：识别首个声道。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># params[&#34;first_channel_only&#34;] = 1;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="s2">&#34;生成 params&#34;</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 获取 signature</span>
</span></span><span class="line"><span class="cl"><span class="n">signstr</span> <span class="o">=</span> <span class="n">format_sign_string</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">signature</span> <span class="o">=</span> <span class="n">sign</span><span class="p">(</span><span class="n">signstr</span><span class="p">,</span> <span class="n">SECRET_KEY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="s2">&#34;生成 signstr&#34;</span><span class="p">,</span> <span class="n">signstr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="s2">&#34;生成 signature&#34;</span><span class="p">,</span> <span class="n">signature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 计算 URL</span>
</span></span><span class="line"><span class="cl"><span class="n">URL</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="n">protocol</span> <span class="o">+</span> <span class="n">signstr</span><span class="p">[</span><span class="mi">4</span><span class="p">::]</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="s2">&#34;计算 URL&#34;</span><span class="p">,</span> <span class="n">URL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 构造 header</span>
</span></span><span class="line"><span class="cl"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Host&#34;</span><span class="p">:</span> <span class="s2">&#34;asr.cloud.tencent.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Authorization&#34;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">signature</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># &#34;Content-Type&#34;: &#34;application/octet-stream&#34;,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># &#34;Content-Length&#34;: &#34;请求长度，此处对应语音数据字节数，单位：字节&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="s2">&#34;生成 headers&#34;</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 音频路径</span>
</span></span><span class="line"><span class="cl"><span class="n">audio</span> <span class="o">=</span> <span class="s2">&#34;./外卖佣金到底有多高.mp3&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 读取音频数据</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 调用腾讯云语音识别 API</span>
</span></span><span class="line"><span class="cl">    <span class="n">e</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">responese</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">code</span> <span class="o">=</span> <span class="n">responese</span><span class="p">[</span><span class="s2">&#34;code&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">code</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">show</span><span class="p">(</span><span class="s2">&#34;识别失败&#34;</span><span class="p">,</span> <span class="n">responese</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">show</span><span class="p">(</span><span class="s2">&#34;识别成功&#34;</span><span class="p">,</span> <span class="n">responese</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 一个channl_result对应一个声道的识别结果</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 大多数音频是单声道，对应一个channl_result</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">channl_result</span> <span class="ow">in</span> <span class="n">responese</span><span class="p">[</span><span class="s2">&#34;flash_result&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">channel_id</span> <span class="o">=</span> <span class="n">channl_result</span><span class="p">[</span><span class="s1">&#39;channel_id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">text</span> <span class="o">=</span> <span class="n">channl_result</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">show</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;channel_id: </span><span class="si">{</span><span class="n">channel_id</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span></span></code></pre></div><p>输出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">[INFO] 生成 params
</span></span><span class="line"><span class="cl">{&#39;secretid&#39;: &#39;xxxxxxxxxxxxxxxxxxx&#39;, &#39;engine_type&#39;: &#39;16k_zh&#39;, &#39;voice_format&#39;: &#39;mp3&#39;, &#39;timestamp&#39;: xxxxxxxxx, &#39;convert_num_mode&#39;: 1}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[INFO] 生成 signstr
</span></span><span class="line"><span class="cl">POSTasr.cloud.tencent.com/asr/flash/v1/xxxxxxxxxxxxx?convert_num_mode=1&amp;engine_type=16k_zh&amp;secretid=xxxxxxxxxxxxxxxxxx&amp;timestamp=xxxxxxxxxx&amp;voice_format=mp3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[INFO] 生成 signature
</span></span><span class="line"><span class="cl">xxxxxxxxxxxxxxxxxxx=
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[INFO] 计算 URL
</span></span><span class="line"><span class="cl">https://asr.cloud.tencent.com/asr/flash/v1/xxxxxxxxx?convert_num_mode=1&amp;engine_type=16k_zh&amp;secretid=xxxxxxxxxxxxxxxxxxxxxxxxxx&amp;timestamp=xxxxxxx&amp;voice_format=mp3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[INFO] 生成 headers
</span></span><span class="line"><span class="cl">{&#39;Host&#39;: &#39;asr.cloud.tencent.com&#39;, &#39;Authorization&#39;: &#39;xxxxxxxxxxxxxxxxxxxxx=&#39;}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[INFO] 识别成功
</span></span><span class="line"><span class="cl">{&#39;request_id&#39;: &#39;xxxxxxxxxxxxxxxxxx&#39;, &#39;code&#39;: 0, &#39;message&#39;: &#39;&#39;, &#39;audio_duration&#39;: xxxxxxxx, &#39;flash_result&#39;: [{&#39;text&#39;: &#39;测试音频转文字内容&#39;, &#39;start_time&#39;: xxxxxxxxx, &#39;end_time&#39;: xxxxxx, &#39;speaker_id&#39;: 0}]}]}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[INFO] channel_id: 0
</span></span><span class="line"><span class="cl">测试音频转文字内容
</span></span></code></pre></div><p>如果有特殊需求，根据可选的 params 参数去调整就好了。</p>
<h2 id="22录音文件识别v3">2.2、录音文件识别（V3）</h2>
<p>录音文件识别演示，目前腾讯云给的免费配额是每月 10 小时。</p>
<p>录音文件识别请求 API 文档：<a href="https://cloud.tencent.com/document/api/1093/37823" target="_blank" rel="noopener noreffer">https://cloud.tencent.com/document/api/1093/37823</a></p>
<p>录音文件识别结果查询 API 文档：<a href="https://cloud.tencent.com/document/api/1093/37822" target="_blank" rel="noopener noreffer">https://cloud.tencent.com/document/api/1093/37822</a></p>
<p>腾讯云 API 3.0 提供了配套的开发工具集 SDK：<a href="https://cloud.tencent.com/document/api/1093/37823#SDK" target="_blank" rel="noopener noreffer">https://cloud.tencent.com/document/api/1093/37823#SDK</a></p>
<h3 id="221安装-python-sdk">2.2.1、安装 Python SDK</h3>
<p>在使用录音文件识别时，需要通过 pip 方式安装腾讯云提供的 Python 版本 SDK:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install --upgrade tencentcloud-sdk-python
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 中国大陆地区的用户可以使用国内镜像源提高下载速度</span>
</span></span><span class="line"><span class="cl">pip install -i https://mirrors.tencent.com/pypi/simple/ --upgrade tencentcloud-sdk-python。
</span></span></code></pre></div><h3 id="222上传本地录音文件识别">2.2.2、上传本地录音文件识别</h3>
<p>腾讯云提供的 API Explorer 可以很方便的生成代码和参数：<a href="https://console.cloud.tencent.com/api/explorer?Product=asr&amp;Version=2019-06-14&amp;Action=CreateRecTask&amp;SignVersion=" target="_blank" rel="noopener noreffer">https://console.cloud.tencent.com/api/explorer?Product=asr&amp;Version=2019-06-14&amp;Action=CreateRecTask&amp;SignVersion=</a></p>
<p>下面我提供一个自己的 demo ，运行前记得替换三个参数为真实值。其中 audio 是本地录音文件相对路径或绝对路径。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">base64</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common</span> <span class="kn">import</span> <span class="n">credential</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.profile.client_profile</span> <span class="kn">import</span> <span class="n">ClientProfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.profile.http_profile</span> <span class="kn">import</span> <span class="n">HttpProfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.exception.tencent_cloud_sdk_exception</span> <span class="kn">import</span> <span class="n">TencentCloudSDKException</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.asr.v20190614</span> <span class="kn">import</span> <span class="n">asr_client</span><span class="p">,</span> <span class="n">models</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">SecretId</span> <span class="o">=</span> <span class="s2">&#34;xxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">SecretKey</span> <span class="o">=</span> <span class="s2">&#34;xxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">audio</span> <span class="o">=</span> <span class="s2">&#34;./audio.mp3&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将录音转为字符串</span>
</span></span><span class="line"><span class="cl"><span class="n">Data</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 读取音频数据</span>
</span></span><span class="line"><span class="cl">    <span class="n">Data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Data</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">Data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Data</span> <span class="o">=</span> <span class="n">Data</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cred</span> <span class="o">=</span> <span class="n">credential</span><span class="o">.</span><span class="n">Credential</span><span class="p">(</span><span class="n">SecretId</span><span class="p">,</span> <span class="n">SecretKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">httpProfile</span> <span class="o">=</span> <span class="n">HttpProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">httpProfile</span><span class="o">.</span><span class="n">endpoint</span> <span class="o">=</span> <span class="s2">&#34;asr.tencentcloudapi.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clientProfile</span> <span class="o">=</span> <span class="n">ClientProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">clientProfile</span><span class="o">.</span><span class="n">httpProfile</span> <span class="o">=</span> <span class="n">httpProfile</span>
</span></span><span class="line"><span class="cl">    <span class="n">client</span> <span class="o">=</span> <span class="n">asr_client</span><span class="o">.</span><span class="n">AsrClient</span><span class="p">(</span><span class="n">cred</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">clientProfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">req</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CreateRecTaskRequest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">        引擎模型类型。 这里的 k 指的是采样率
</span></span></span><span class="line"><span class="cl"><span class="s1">            电话场景： 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 8k_en：电话8k英语； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 8k_zh：电话8k中文普通话通用； 
</span></span></span><span class="line"><span class="cl"><span class="s1">            
</span></span></span><span class="line"><span class="cl"><span class="s1">            非电话场景： 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_zh：16k 中文普通话通用； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_zh_video：16k 音视频领域； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_en：16k 英语； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_ca：16k 粤语； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_ja：16k 日语； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_zh_edu 中文教育； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_en_edu 英文教育； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_zh_medical 医疗；
</span></span></span><span class="line"><span class="cl"><span class="s1">                • 16k_th 泰语；
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;EngineModelType&#34;</span><span class="p">:</span> <span class="s2">&#34;16k_zh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            识别声道数。注意：录音识别会自动将音频转码为填写的识别声道数
</span></span></span><span class="line"><span class="cl"><span class="s1">                1：单声道；
</span></span></span><span class="line"><span class="cl"><span class="s1">                2：双声道（仅支持 8k_zh 引擎模）。
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ChannelNum&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            识别结果返回形式。
</span></span></span><span class="line"><span class="cl"><span class="s1">                0： 识别结果文本(含分段时间戳)； 
</span></span></span><span class="line"><span class="cl"><span class="s1">                1：词级别粒度的详细识别结果(不含标点，含语速值)；
</span></span></span><span class="line"><span class="cl"><span class="s1">                2：词级别粒度的详细识别结果（包含标点、语速值）
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ResTextFormat&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            语音数据来源。
</span></span></span><span class="line"><span class="cl"><span class="s1">                0：语音 URL；
</span></span></span><span class="line"><span class="cl"><span class="s1">                1：语音数据（post body）。
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;SourceType&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            语音数据，当SourceType 值为1时必须填写，为0可不写。
</span></span></span><span class="line"><span class="cl"><span class="s1">                要base64编码(采用python语言时注意读取文件应该为string而不是byte，以byte格式读取后要decode()。
</span></span></span><span class="line"><span class="cl"><span class="s1">                编码后的数据不可带有回车换行符)。音频数据要小于5MB。
</span></span></span><span class="line"><span class="cl"><span class="s1">        &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Data&#34;</span><span class="p">:</span> <span class="n">Data</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">req</span><span class="o">.</span><span class="n">from_json_string</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">CreateRecTask</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">to_json_string</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">TencentCloudSDKException</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span></code></pre></div><p>输出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Data&#34;</span><span class="p">:{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;TaskId&#34;</span><span class="p">:</span><span class="mi">1234567890</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;RequestId&#34;</span><span class="p">:</span><span class="s2">&#34;f1234567-89a4-1234-12d3-d56bdd9aac1a&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>请求成功后，返回的 JSON 中 Data -&gt; TaskId 就是我们此次上传任务的 ID ，需要拿这个 ID 去轮训另一个接口，查询是否成功。</p>
<h3 id="223查询录音文件识别结果">2.2.3、查询录音文件识别结果</h3>
<p>腾讯云提供的 API Explorer 可以很方便的生成代码和参数：<a href="https://console.cloud.tencent.com/api/explorer?Product=asr&amp;Version=2019-06-14&amp;Action=DescribeTaskStatus&amp;SignVersion=" target="_blank" rel="noopener noreffer">https://console.cloud.tencent.com/api/explorer?Product=asr&amp;Version=2019-06-14&amp;Action=DescribeTaskStatus&amp;SignVersion=</a></p>
<p>用 TaskID 查询识别结果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common</span> <span class="kn">import</span> <span class="n">credential</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.profile.client_profile</span> <span class="kn">import</span> <span class="n">ClientProfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.profile.http_profile</span> <span class="kn">import</span> <span class="n">HttpProfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.exception.tencent_cloud_sdk_exception</span> <span class="kn">import</span> <span class="n">TencentCloudSDKException</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.asr.v20190614</span> <span class="kn">import</span> <span class="n">asr_client</span><span class="p">,</span> <span class="n">models</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">SecretId</span> <span class="o">=</span> <span class="s2">&#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">SecretKey</span> <span class="o">=</span> <span class="s2">&#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">TaskId</span> <span class="o">=</span> <span class="mi">1234567890</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cred</span> <span class="o">=</span> <span class="n">credential</span><span class="o">.</span><span class="n">Credential</span><span class="p">(</span><span class="n">SecretId</span><span class="p">,</span> <span class="n">SecretKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">httpProfile</span> <span class="o">=</span> <span class="n">HttpProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">httpProfile</span><span class="o">.</span><span class="n">endpoint</span> <span class="o">=</span> <span class="s2">&#34;asr.tencentcloudapi.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clientProfile</span> <span class="o">=</span> <span class="n">ClientProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">clientProfile</span><span class="o">.</span><span class="n">httpProfile</span> <span class="o">=</span> <span class="n">httpProfile</span>
</span></span><span class="line"><span class="cl">    <span class="n">client</span> <span class="o">=</span> <span class="n">asr_client</span><span class="o">.</span><span class="n">AsrClient</span><span class="p">(</span><span class="n">cred</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">clientProfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">req</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DescribeTaskStatusRequest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;TaskId&#34;</span><span class="p">:</span> <span class="n">TaskId</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">req</span><span class="o">.</span><span class="n">from_json_string</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">DescribeTaskStatus</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">to_json_string</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">TencentCloudSDKException</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span></code></pre></div><p>输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Data&#34;</span><span class="p">:{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;TaskId&#34;</span><span class="p">:</span><span class="mi">1234567890</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Status&#34;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;StatusStr&#34;</span><span class="p">:</span><span class="s2">&#34;success&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Result&#34;</span><span class="p">:</span><span class="s2">&#34;[0:0.000,1:0.320]  识别结果。\n[1:0.320,2:0.360]  识别结果。\n[2:0.360,3:0.380]  识别结果。\n[3:0.380,4:0.400]  识别结果。\n[4:0.400,5:0.420]  识别结果。\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;ErrorMsg&#34;</span><span class="p">:</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;ResultDetail&#34;</span><span class="p">:</span><span class="kc">null</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;RequestId&#34;</span><span class="p">:</span><span class="s2">&#34;12345678-1234-1234-1234-b11234567890&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="23一句话识别v3">2.3、一句话识别（V3）</h2>
<p>文档地址：<a href="https://cloud.tencent.com/document/product/1093/35646" target="_blank" rel="noopener noreffer">https://cloud.tencent.com/document/product/1093/35646</a></p>
<p>API Explorer：<a href="https://console.cloud.tencent.com/api/explorer?Product=asr&amp;Version=2019-06-14&amp;Action=SentenceRecognition&amp;SignVersion=" target="_blank" rel="noopener noreffer">https://console.cloud.tencent.com/api/explorer?Product=asr&amp;Version=2019-06-14&amp;Action=SentenceRecognition&amp;SignVersion=</a></p>
<h3 id="231安装-python-sdk">2.3.1、安装 Python SDK</h3>
<p>在使用录音文件识别时，需要通过 pip 方式安装腾讯云提供的 Python 版本 SDK:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install --upgrade tencentcloud-sdk-python
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 中国大陆地区的用户可以使用国内镜像源提高下载速度</span>
</span></span><span class="line"><span class="cl">pip install -i https://mirrors.tencent.com/pypi/simple/ --upgrade tencentcloud-sdk-python。
</span></span></code></pre></div><h3 id="232源码">2.3.2、源码</h3>
<p>借助 API Explorer 生成的源码，我修改了一些东西：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">base64</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common</span> <span class="kn">import</span> <span class="n">credential</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.profile.client_profile</span> <span class="kn">import</span> <span class="n">ClientProfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.profile.http_profile</span> <span class="kn">import</span> <span class="n">HttpProfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.common.exception.tencent_cloud_sdk_exception</span> <span class="kn">import</span> <span class="n">TencentCloudSDKException</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tencentcloud.asr.v20190614</span> <span class="kn">import</span> <span class="n">asr_client</span><span class="p">,</span> <span class="n">models</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">SecretId</span> <span class="o">=</span> <span class="s2">&#34;xxxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">SecretKey</span> <span class="o">=</span> <span class="s2">&#34;xxxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">audio</span> <span class="o">=</span> <span class="s2">&#34;./一句话录音.mp3&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将录音转为字符串</span>
</span></span><span class="line"><span class="cl"><span class="n">Data</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 读取音频数据</span>
</span></span><span class="line"><span class="cl">    <span class="n">Data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Data</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">Data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Data</span> <span class="o">=</span> <span class="n">Data</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cred</span> <span class="o">=</span> <span class="n">credential</span><span class="o">.</span><span class="n">Credential</span><span class="p">(</span><span class="n">SecretId</span><span class="p">,</span> <span class="n">SecretKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">httpProfile</span> <span class="o">=</span> <span class="n">HttpProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">httpProfile</span><span class="o">.</span><span class="n">endpoint</span> <span class="o">=</span> <span class="s2">&#34;asr.tencentcloudapi.com&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clientProfile</span> <span class="o">=</span> <span class="n">ClientProfile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">clientProfile</span><span class="o">.</span><span class="n">httpProfile</span> <span class="o">=</span> <span class="n">httpProfile</span>
</span></span><span class="line"><span class="cl">    <span class="n">client</span> <span class="o">=</span> <span class="n">asr_client</span><span class="o">.</span><span class="n">AsrClient</span><span class="p">(</span><span class="n">cred</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">clientProfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">req</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">SentenceRecognitionRequest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ProjectId&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;SubServiceType&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;EngSerViceType&#34;</span><span class="p">:</span> <span class="s2">&#34;16k_zh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;SourceType&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Data&#34;</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;VoiceFormat&#34;</span><span class="p">:</span> <span class="s2">&#34;mp3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;UsrAudioKey&#34;</span><span class="p">:</span> <span class="s2">&#34;uniqueKey-1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">req</span><span class="o">.</span><span class="n">from_json_string</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">SentenceRecognition</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">to_json_string</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="n">TencentCloudSDKException</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span></span></code></pre></div><p>输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Result&#34;</span><span class="p">:</span><span class="s2">&#34;一句话录音识别内容&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;AudioDuration&#34;</span><span class="p">:</span><span class="mi">59996</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;WordSize&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;WordList&#34;</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;RequestId&#34;</span><span class="p">:</span><span class="s2">&#34;12345678-4307-46ae-1234-beb3eb051234&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h1 id="ref">REF</h1>
<p>长时间的会议录音如何快速转化成文字：<a href="https://www.zhihu.com/question/21552953" target="_blank" rel="noopener noreffer">https://www.zhihu.com/question/21552953</a></p>
<p>如何用ffmpeg从mkv视频文件中提取音频？：<a href="https://www.zhihu.com/question/420452079" target="_blank" rel="noopener noreffer">https://www.zhihu.com/question/420452079</a></p>]]></description>
</item><item>
    <title>Hugo - 如何一键发布新文章？</title>
    <link>https://sugarless.cn/posts/hugo-one-click-deployment.html</link>
    <pubDate>Wed, 14 Jul 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/hugo-one-click-deployment.html</guid>
    <description><![CDATA[<p>你还在为使用 hugo 发布文章时的繁琐步骤烦恼吗？</p>
<blockquote>
<p>本文默认你已经掌握了 hugo + Github Pages 的博客搭建。</p>
<p>我会以 Windows 平台作为演示，其它系统可参照思路，大同小异。</p>
</blockquote>
<h1 id="一安装-git">一、安装 Git</h1>
<p>先安装 git bash ，官网：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreffer">https://git-scm.com/downloads</a></p>
<h1 id="二使-public-目录成为一个-git-repository">二、使 public 目录成为一个 git repository</h1>
<p>博客源码存放目录：<code>D:\blog\src</code></p>
<pre tabindex="0"><code>D:\blog\src
│  config.toml
├─archetypes 
├─assets
├─content
├─data
├─layouts
├─public    
├─resources
├─static
└─themes
</code></pre><p>接下来将 git 仓库（xxx.github.io）的  .git 文件夹和 CNAME 文件复制一份到博客根目录的 public 文件夹中，使 public 目录成为一个 git 仓库（repository）。</p>
<blockquote>
<p>这样 hugo 在 public 文件夹中生成的文件就可以直接使用 git 命令推送到 Github 了。</p>
<p>如果配合 Github Webhook 使用，就可以把 xxx.github.io 当做源站了。在此基础上，你可以自行购买域名做 CDN 或者在自己的服务器上部署一个镜像站。</p>
</blockquote>
<h1 id="三配置一键命令">三、配置一键命令</h1>
<p>我决定将 <code>git blog</code>  这个命令作为以后日常一键部署的命令。输入以下命令即可完成配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global alias.blog <span class="s1">&#39;!cd D:\\blog\\src;hugo;cd D:\\blog\\src\\public;git add .;git commit -m &#39;</span>update<span class="s1">&#39;;git push&#39;</span>
</span></span></code></pre></div><blockquote>
<p>使用 alias 即可为一系列命令配置一个别名</p>
</blockquote>
<h1 id="四一键部署">四、一键部署</h1>
<p>当你写好文章之后，就可以在任意目录执行这个命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git blog
</span></span></code></pre></div><p>此时系统会自动执行下面的命令：</p>
<pre tabindex="0"><code>cd D:\\blog\\src
hugo
cd D:\\blog\\src\\public
git add .
git commit -m &#39;update&#39;
git push
</code></pre><p>这样就达到了我们的目的：通过一个命令就可以更新博客文件，并自动推送到 github 上。</p>
<h1 id="补充">补充</h1>
<p>如果你同时使用了 <code>Github Pages</code>  和 <code>Gitee Pages</code>  服务，并且还希望能一条命令同时推送到 Github 和 Gitee，那么你可以参考 <a href="https://zhuanlan.zhihu.com/p/341272233" target="_blank" rel="noopener noreffer">https://zhuanlan.zhihu.com/p/341272233</a>，修改 <code>git blog</code>  对应的命令即可。</p>
<p>给你提个醒：<code>git push github</code> ，<code>git push gitee</code> 。</p>
<p>希望本文能帮到正在使用 hugo 的你。</p>]]></description>
</item></channel>
</rss>

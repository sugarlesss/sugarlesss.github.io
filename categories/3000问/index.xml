<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>3000问 - 分类 - 無糖的小宇宙</title>
        <link>https://sugarless.cn/categories/3000%E9%97%AE.html</link>
        <description>3000问 - 分类 - 無糖的小宇宙</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jaded@foxmail.com (無糖)</managingEditor>
            <webMaster>jaded@foxmail.com (無糖)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 03 Dec 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://sugarless.cn/categories/3000%E9%97%AE.html" rel="self" type="application/rss+xml" /><item>
    <title>内存泄漏和内存溢出是什么？</title>
    <link>https://sugarless.cn/posts/what-are-memory-leaks-and-out-of-memory.html</link>
    <pubDate>Fri, 03 Dec 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/what-are-memory-leaks-and-out-of-memory.html</guid>
    <description><![CDATA[<h1 id="一内存泄漏和内存溢出" class="headerLink">
    <a href="#%e4%b8%80%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f%e5%92%8c%e5%86%85%e5%ad%98%e6%ba%a2%e5%87%ba" class="header-mark"></a>一、内存泄漏和内存溢出</h1><p>内存泄漏 ( Memory Leak ) 指的是已分配的内存由于某种原因导致程序未释放或无法释放，造成程序继续占用已经不再使用的内存空间，令内存资源空耗。</p>
<p>内存溢出 ( Out Of Memory，简称 OOM ) 是指系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存。</p>
<p>由于内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误现象，而是逐渐积累，直到 OOM。</p>
<blockquote>
<p>内存泄漏最终会导致内存溢出。</p>
</blockquote>
<h1 id="二内存泄漏的分类" class="headerLink">
    <a href="#%e4%ba%8c%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f%e7%9a%84%e5%88%86%e7%b1%bb" class="header-mark"></a>二、内存泄漏的分类</h1><p>以产生的方式来分类，内存泄漏可以分为四类：</p>
<h2 id="21常发性内存泄漏" class="headerLink">
    <a href="#21%e5%b8%b8%e5%8f%91%e6%80%a7%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f" class="header-mark"></a>2.1、常发性内存泄漏</h2><p>发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。</p>
<h2 id="22偶发性内存泄漏" class="headerLink">
    <a href="#22%e5%81%b6%e5%8f%91%e6%80%a7%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f" class="header-mark"></a>2.2、偶发性内存泄漏</h2><p>发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。</p>
<h2 id="23一次性内存泄漏" class="headerLink">
    <a href="#23%e4%b8%80%e6%ac%a1%e6%80%a7%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f" class="header-mark"></a>2.3、一次性内存泄漏</h2><p>发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。</p>
<h2 id="24隐式内存泄漏" class="headerLink">
    <a href="#24%e9%9a%90%e5%bc%8f%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f" class="header-mark"></a>2.4、隐式内存泄漏</h2><p>程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。</p>
<hr>
<p>具体的例子等以后再补全&hellip;</p>
<h1 id="ref" class="headerLink">
    <a href="#ref" class="header-mark"></a>REF</h1><p><a href="https://zh.wikipedia.org/wiki/%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/wiki/内存泄漏</a></p>
<p><a href="https://baike.baidu.com/item/%e5%86%85%e5%ad%98%e6%ba%a2%e5%87%ba" target="_blank" rel="noopener noreferrer">https://baike.baidu.com/item/内存溢出</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/103274367" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/103274367</a></p>]]></description>
</item><item>
    <title>CDN 是什么？ 有多贵？</title>
    <link>https://sugarless.cn/posts/what-is-cdn.html</link>
    <pubDate>Mon, 02 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/what-is-cdn.html</guid>
    <description><![CDATA[<p>为什么 CDN 能加速网站访问？</p>
<p>当前大厂提供的 CDN 价格有多高？</p>
<h1 id="一cdn-是什么" class="headerLink">
    <a href="#%e4%b8%80cdn-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>一、CDN 是什么？</h1><p>CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。</p>
<p>CDN 这个概念始于1996年，是美国麻省理工学院的一个研究小组为改善互联网的服务质量而提出的。为了能在传统IP网上发布丰富的宽带媒体内容，他们提出在现有互联网基础上建立一个内容分发平台专门为网站提供服务，并于 1999 年成立了专门的 CDN 服务公司，为 Yahoo 提供专业服务。由于 CDN 是为加快网络访问速度而被优化的网络覆盖层，因此被形象地称为“网络加速器”。</p>
<h1 id="二cdn-加速原理" class="headerLink">
    <a href="#%e4%ba%8ccdn-%e5%8a%a0%e9%80%9f%e5%8e%9f%e7%90%86" class="header-mark"></a>二、CDN 加速原理</h1><h2 id="21原理" class="headerLink">
    <a href="#21%e5%8e%9f%e7%90%86" class="header-mark"></a>2.1、原理</h2><p>以接入腾讯云 CDN 为例，假设业务源站域名为 <code>www.test.com</code>，域名接入 CDN 开始使用加速服务后，当用户发起 HTTP 请求时，实际的处理流程如下图所示：</p>
<p><figure><a class="lightgallery" href="/post_images/image.png" title="img" data-thumbnail="/post_images/image.png">
        
    </a></figure></p>
<p><strong>详细说明如下：</strong></p>
<ol>
<li>用户向 <code>www.test.com</code> 下的某图片资源（如：1.jpg）发起请求，会先向 Local DNS 发起域名解析请求。</li>
<li>当 Local DNS 解析 <code>www.test.com</code> 时，会发现已经配置了 CNAME <code>www.test.com.cdn.dnsv1.com</code>，解析请求会发送至 Tencent DNS（GSLB），GSLB 为腾讯云自主研发的调度体系，会为请求分配最佳节点 IP。</li>
<li>Local DNS 获取 Tencent DNS 返回的解析 IP。</li>
<li>用户获取解析 IP。</li>
<li>用户向获取的 IP 发起对资源 1.jpg 的访问请求。</li>
<li>若该 IP 对应的节点缓存有 1.jpg，则会将数据直接返回给用户（10），此时请求结束。若该节点未缓存 1.jpg，则节点会向业务源站发起对 1.jpg 的请求（6、7、8），获取资源后，结合用户自定义配置的缓存策略（可参考产品文档中的缓存过期配置，将资源缓存至节点（9），并返回给用户（10），此时请求结束。</li>
</ol>
<h2 id="22解决什么问题" class="headerLink">
    <a href="#22%e8%a7%a3%e5%86%b3%e4%bb%80%e4%b9%88%e9%97%ae%e9%a2%98" class="header-mark"></a>2.2、解决什么问题？</h2><p>CDN 有效地解决了目前互联网业务中网络层面的以下问题：</p>
<ol>
<li>用户与业务服务器地域间物理距离较远，需要进行多次网络转发，传输延时较高且不稳定。</li>
<li>用户使用运营商与业务服务器所在运营商不同，请求需要运营商之间进行互联转发。</li>
<li>业务服务器网络带宽、处理能力有限，当接收到海量用户请求时，会导致响应速度降低、可用性降低。</li>
</ol>
<p>且 CDN 接入比较简单，源站无需调整自身业务结构，或是进行复杂的操作配置，即可享受全球 CDN 加速服务。</p>
<h1 id="三cdn-究竟有多贵" class="headerLink">
    <a href="#%e4%b8%89cdn-%e7%a9%b6%e7%ab%9f%e6%9c%89%e5%a4%9a%e8%b4%b5" class="header-mark"></a>三、CDN 究竟有多贵？</h1><p>这里我找了 5 家不同的云厂商 CDN 产品来对比他们的价格，但需要注意的是：</p>
<ul>
<li>此处的价格对比仅针对中国大陆</li>
<li>仅对比 100G / 500G / 1TB 三个档位的资源包价格</li>
<li>资源包有效期都选择 1 年</li>
</ul>
<p>先说结论：腾讯云的价格是最低的。</p>
<p>100G 1年有效期的资源包：价格从 17~21 元不等，腾讯云价格最低，七牛云价格最高。</p>
<p>500G 1年有效期的资源包：价格从 90-100 元不等，京东云价格最低，又拍云价格最高。</p>
<p>1TB 1年有效期的资源包：价格从 165-270 元不等，腾讯云价格最低，又拍云价格最高。</p>
<h2 id="31七牛云" class="headerLink">
    <a href="#31%e4%b8%83%e7%89%9b%e4%ba%91" class="header-mark"></a>3.1、七牛云</h2><p>100G 档 21 元</p>
<p>500G 档 99 元</p>
<p>1TB 档 189 元</p>
<p>CDN中国大陆资源包：<a href="https://qmall.qiniu.com/template/NTI" target="_blank" rel="noopener noreferrer">官网链接</a></p>
<p>七牛云的特色是支持 全时段 / 日间 / 闲时 三种不同价格的资源包，价格也不同，可以根据自己的业务需求有针对性的购买。</p>
<h2 id="32又拍云" class="headerLink">
    <a href="#32%e5%8f%88%e6%8b%8d%e4%ba%91" class="header-mark"></a>3.2、又拍云</h2><p>100G 档 20 元</p>
<p>500G 档 100 元</p>
<p>1TB 档 270 元</p>
<p>CDN 大陆流量包购买：<a href="https://console.upyun.com/billing/resources/buy/" target="_blank" rel="noopener noreferrer">官网链接</a></p>
<p>又拍云有额外限制：100GB、500GB 属于特惠流量包，只能二选一，且在有效期三个月内仅可购买一次</p>
<h2 id="33京东云" class="headerLink">
    <a href="#33%e4%ba%ac%e4%b8%9c%e4%ba%91" class="header-mark"></a>3.3、京东云</h2><p>100G 档 18 元</p>
<p>500G 档 90 元</p>
<p>1TB 档 180 元</p>
<p>CDN资源包：<a href="https://common-buy.jdcloud.com/resource/create?serviceCode=cdnbag#" target="_blank" rel="noopener noreferrer">官网链接</a></p>
<h2 id="34腾讯云" class="headerLink">
    <a href="#34%e8%85%be%e8%ae%af%e4%ba%91" class="header-mark"></a>3.4、腾讯云</h2><p>100G 档 17 元</p>
<p>500G 档 84 元</p>
<p>1TB 档 165 元</p>
<p>CDN流量包：<a href="https://buy.cloud.tencent.com/cdn_package" target="_blank" rel="noopener noreferrer">官网链接</a></p>
<p>不愧是良心云，价格优势巨大。</p>
<h2 id="35阿里云" class="headerLink">
    <a href="#35%e9%98%bf%e9%87%8c%e4%ba%91" class="header-mark"></a>3.5、阿里云</h2><p>100G 档 20 元</p>
<p>500G 档 95 元</p>
<p>1TB 档 180 元</p>
<p>CDN/全站加速资源包：<a href="https://common-buy.aliyun.com/?commodityCode=dcdnpaybag#/buy" target="_blank" rel="noopener noreferrer">官网链接</a></p>
<h1 id="ref" class="headerLink">
    <a href="#ref" class="header-mark"></a>REF</h1><p>CDN 百度百科：<a href="https://baike.baidu.com/item/CDN" target="_blank" rel="noopener noreferrer">https://baike.baidu.com/item/CDN</a></p>
<p>腾讯云 CDN 产品概述：<a href="https://cloud.tencent.com/document/product/228/2939" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/document/product/228/2939</a></p>]]></description>
</item><item>
    <title>为什么 CPU 的线程数是核心数的两倍？</title>
    <link>https://sugarless.cn/posts/about-hyper-threading-technology.html</link>
    <pubDate>Sun, 25 Jul 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/about-hyper-threading-technology.html</guid>
    <description><![CDATA[<p>4 核 8 线程，8 核 16 线程是啥意思？</p>
<p>为什么不是 4 核 4 线程或 8 核 32 线程？</p>
<h1 id="一关于超线程" class="headerLink">
    <a href="#%e4%b8%80%e5%85%b3%e4%ba%8e%e8%b6%85%e7%ba%bf%e7%a8%8b" class="header-mark"></a>一、关于超线程</h1><p>超线程是英特尔公司命名的技术（HT, Hyper-Threading），但是这项技术最早起源于 IBM ，学术一些的名字叫同时多线程（SMT,Simulate Multi-Threading）。</p>
<p>超线程技术其实是把一个 CPU 的物理核模拟成两个虚拟核用，通过此技术，英特尔实现在一个实体 CPU 物理核中，提供两个逻辑线程。让单个物理核心就能使用线程级的并行计算，进而兼容多线程操作系统和软件。超线程技术充分利用空闲 CPU 资源，在相同时间内完成更多工作。</p>
<p>虽然采用超线程技术能够使得单个物理核心同时执行两个线程，但是当两个线程同时需要某个资源时，其中一个线程必须让出资源暂时挂起，直到这些资源空闲以后才能继续。因此，超线程的性能并不等于两个物理核心的性能。而且，超线程技术的 CPU 需要芯片组、操作系统和应用软件的支持，才能比较理想地发挥该项技术的优势。</p>
<h1 id="二为什么超线程只虚拟出两个逻辑核" class="headerLink">
    <a href="#%e4%ba%8c%e4%b8%ba%e4%bb%80%e4%b9%88%e8%b6%85%e7%ba%bf%e7%a8%8b%e5%8f%aa%e8%99%9a%e6%8b%9f%e5%87%ba%e4%b8%a4%e4%b8%aa%e9%80%bb%e8%be%91%e6%a0%b8" class="header-mark"></a>二、为什么超线程只虚拟出两个逻辑核？</h1><p>先说一些耳熟能详的数字：四核八线程、八核十六线程等。这是典型的超线程技术应用，一个物理核心虚拟出两个逻辑核。</p>
<p>超线程的基本原理，用大白话讲就是：单核心工作量不饱满，给两个线程能提高利用率。就好比有的打工人业余时间能搞个副业一样，但可以压榨的工作量显然是有限的。</p>
<p>每个 CPU 核心里的 ALU，FPU 这些运算单元的数量是有限的，而超线程的目的之一就是在一个线程用运算单元少的情况下，让另外一个线程跑起来，不让运算单元闲着。但是现在的CPU那么发达，有分支预测乱序执行等技术，内存，IO的频率正在逐渐提高，已经可以让CPU的核处于忙碌状态，2 个已经差不多，无需搞出更多个线程了。</p>
<p>对于计算密集的程序，超线程甚至会拖累性能。</p>
<p>如果当一个线程整数，浮点运算各种多，当前核心运算单元没多少空闲了，这时候你再塞进了一个线程，这下子资源就紧张了。两线程就会互相抢资源，拖慢对方速度。所以，如果你的程序是单线程，关了超线程，免得别人抢你资源，如果是多线程，每个线程运算不大，超线程比较有用。</p>
<blockquote>
<p>补充：</p>
<p>超线程并不仅限于两个逻辑核，如果想的话可以搞出来更多，代表是IBM的power系列:SMT8(每核8线程)的设计，也是相当恐怖了。但是这种设计其实并不是符合大部分通用应用的需求。</p>
<p>SMT的出发点还是还是处理器内部的执行指令的时候，因为许多原因(比如等待内存IO)，导致CPU中的许多资源空闲，所以可以让CPU跑多个线程，进而提高资源利用率，提升性能。这种方法还有一个优点，对于一些存在缓存共享，负载不高的线程，通过这种方式，分配到相同核心的不同超线程下，可以节约切换开销。</p>
<p>但是这些自然不是免费，超线程的副作用存在于很多方面。</p>
<p>首先很明显，处理器核心中各种执行资源都是有限的，某些资源(比如ALU)在几个线程之间争用，一些资源需要直接平分给几个个线程。结果可能导致两个线程执行的速度都下降，甚至不如单线程运行，这在一些本身优化较好的SIMD程序中比较常见。所以我们很多日常用支持SMT的处理器，即使bios开启SMT，很多时候，尤其是低载情况下都是运行在1T模式的(也就是核心只有一个线程运行)。</p>
<p>各个线程的任务虽然跑在一个物理核心上，但是他们的指令，寄存器等等仍是需要分开的，处理器核心内部的其他执行资源也需要进行动态或者静态的分配，这些都需要在处理器中添加额外的调度，增加晶体管。与之对应，一个超频爱好者比较熟悉的现象就是关超线程超频，可能更凉快，同时频率更高。</p>
<p>这些多余的晶体管花在SMT上是否值得，拿来提升处理器单线程执行资源的利用率或者堆更多资源提升单线程性能，是不是会有更多收益就变成了一个值得权衡的问题。</p>
<p>对于Power这种SMT8的怪物，上面两个问题会因为SMT线程数增多而加剧，为了缓解这种情况需要堆更多的资源，这又会增加调度复杂度，需要更多的晶体管，为了解决只好把部分资源按超线程进行直接划分，这部分资源在单线程模式下也会无法利用，导致<strong>单核性能偏弱</strong>，这在很大程度不符合大部分通用应用中的需求(这个其实挺显然，很多时候都能体会到，一部分在于很多程序并没有很好的多线程优化而依赖于单线程性能，同时并行化到最后实际的瓶颈也在单线程。</p>
</blockquote>
<h1 id="ref" class="headerLink">
    <a href="#ref" class="header-mark"></a>REF</h1><p><a href="https://www.zhihu.com/question/444841440/answer/1745910660" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/444841440/answer/1745910660</a></p>
<p><a href="https://www.cnblogs.com/jiading/articles/12588488.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/jiading/articles/12588488.html</a></p>
<p><a href="https://baike.baidu.com/item/%E8%B6%85%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener noreferrer">https://baike.baidu.com/item/%E8%B6%85%E7%BA%BF%E7%A8%8B</a></p>]]></description>
</item></channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>How-to-use - 分类 - 無糖的小宇宙</title>
        <link>https://sugarless.cn/categories/how-to-use.html</link>
        <description>How-to-use - 分类 - 無糖的小宇宙</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>jaded@foxmail.com (無糖)</managingEditor>
            <webMaster>jaded@foxmail.com (無糖)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 18 Aug 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://sugarless.cn/categories/how-to-use.html" rel="self" type="application/rss+xml" /><item>
    <title>如何使用 Github webhook 配合宝塔 webhook 自动化部署</title>
    <link>https://sugarless.cn/posts/how-to-use-github-webhook-and-btpanel-webhook.html</link>
    <pubDate>Wed, 18 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/how-to-use-github-webhook-and-btpanel-webhook.html</guid>
    <description><![CDATA[<p>如果你提交版本后需要手动进入服务器 shell 去 git pull ，那么本文或许对你有些帮助。</p>
<h1 id="一关于-webhook">一、关于 webhook</h1>
<p>为了让你直观的了解到 webhook 能做什么，我例举了两个比较常见的应用场景：</p>
<ul>
<li>
<p>你在 Github 上开源了一个项目，你希望在 git push 提交新版本到 Github 后，部署了宝塔面板的服务器能自动执行 git pull 命令，从 Github 拉取最新版本代码。</p>
</li>
<li>
<p>你在 gitee 或自建的 gogs （一款开源 git server ）上托管代码，你希望在 git push 提交新版本到远程仓库后，服务器能自动执行 git pull 命令，从远程仓库拉取最新版本的代码，并重启服务。</p>
</li>
</ul>
<p>实际上，你可以把它看做一种事件触发器。当满足某种特定条件时，执行一系列特定操作。其中，一方是事件发起者，另一方是事件接收者。</p>
<p>以第一个例子来解释，Github 接收到 push 后，发起一个 HTTP(S) 请求，响应者接收到请求后执行特定命令或业务逻辑。Github 是事件发起者，部署了宝塔面板的服务器是事件执行者。</p>
<h1 id="二配置宝塔面板-webhook">二、配置宝塔面板 webhook</h1>
<p>我的博客部署在腾讯云的服务器上，因为博客框架用的是 hugo ，所以生成的站点源码就是纯静态网页。（之所以不直接白嫖 Github pages 服务，是因为百度 spider 被 Github ban 了）。</p>
<p>所以我希望在写完文章后 push 给 Github 后，部署了宝塔面板的腾讯云服务器能 cd 到博客源码目录下执行 git pull 命令，这样就可以从 Github 拉取最新的版本覆盖服务器上当前的版本了，因为是静态资源，所以无需重启什么服务，git pull 完成后即更新完毕。</p>
<h2 id="1安装宝塔-webhook-插件">1）安装宝塔 WebHook 插件</h2>
<p>去软件商店可以找到这玩意儿</p>
<p></p>
<h2 id="2添加-webhook">2）添加 WebHook</h2>
<p></p>
<h2 id="3配置执行命令">3）配置执行命令</h2>
<pre tabindex="0"><code>cd /www/wwwroot/sugarlesss.github.io;
git pull;
</code></pre><p></p>
<p>配置完成后，就可以看到一条 webhook 规则了。</p>
<p></p>
<h2 id="4获取-webhook-url">4）获取 webhook url</h2>
<p>点击查看秘钥，蓝色选中的部分就是宝塔面板提供的 webhook url ，当链接被访问时，就会执行我们上一步配置的命令，自动 git pull 了。</p>
<p></p>
<h1 id="三配置-github-webhook">三、配置 Github webhook</h1>
<p>还是以我的博客仓库为例，在仓库的 Settings -&gt; Webhooks 页面右上角 add webhook 。</p>
<p></p>
<p>将宝塔提供的 webhook url 填入此处的 Payload URL，并将下方的 Content type 修改为 application/json ，否则 Github 请求此 URL 时，宝塔会返回 403 错误。</p>
<p></p>
<h1 id="注意事项">注意事项</h1>
<ul>
<li>在服务器上生成一对 SSH 秘钥，将公钥配置到你的 Github 账号后，服务器就可以使用 git pull 命令拉取最新版本，不需要输入账号密码了。</li>
<li>如果在配置 Github webhook 时，Content type 你忘记修改为 application/json ，宝塔会返回 403 错误，你配置的一系列自定义命令就无法执行了。</li>
</ul>
<h1 id="ref">REF</h1>
<p><a href="https://www.cnblogs.com/blibli/p/11331509.html" target="_blank" rel="noopener noreffer">https://www.cnblogs.com/blibli/p/11331509.html</a></p>]]></description>
</item><item>
    <title>如何使用 FFmpeg 下载 ts 流媒体视频</title>
    <link>https://sugarless.cn/posts/how-to-use-ffmpeg-download-ts-streaming-video.html</link>
    <pubDate>Tue, 13 Jul 2021 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/how-to-use-ffmpeg-download-ts-streaming-video.html</guid>
    <description><![CDATA[<p>有些网页上的视频是分成多个 ts 片段的，无法被 chrome的 各种嗅探器插件捕获，但通过 F12 开发工具监测网络（Network）时，在过滤器中输入 m3u8，可以发现一个独立的 m3u8 文件，这个文件就是记录了所有 ts 文件片段的一个播放列表。</p>
<p></p>
<p>文件内容大致像这样：</p>
<p></p>
<p>如果没有发现独立的 m3u8 文件，有可能每一个 ts 文件的地址中也是含有这个 m3u8 文件的名称的。把这个 m3u8 文件的完整地址截取出来。针对这种情况，我就不具体举例了，因为我还没遇到过。</p>
<p>到 header tab 里，复制一下这个 m3u8 文件的完整 url ，画红线的这部分就是。</p>
<p></p>
<p>假设这个地址是：https://xxx.abc.com/xxx/a.m3u8</p>
<p>可以使用ffmpeg（<a href="https://link.zhihu.com/?target=https%3A//www.ffmpeg.org/" target="_blank" rel="noopener noreffer">FFmpeg</a>）命令下载合并输出为一个视频文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">ffmpeg -i https://xxx.abc.com/xxx/a.m3u8 -c copy output.mp4
</code></pre></div><p></p>]]></description>
</item><item>
    <title>如何使用 frp 内网穿透</title>
    <link>https://sugarless.cn/posts/how-to-use-frp.html</link>
    <pubDate>Sun, 20 Dec 2020 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/how-to-use-frp.html</guid>
    <description><![CDATA[<p>frp 是一个基于 Go 语言开发的专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。frp 上手难度低，配置起来并不算困难。</p>
<p>Github：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener noreffer">https://github.com/fatedier/frp</a></p>
<p>官网：<a href="https://gofrp.org/" target="_blank" rel="noopener noreffer">https://gofrp.org</a></p>
<p>通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网。前提是，内网能访问外网。而不是像特殊单位的纯内网环境，不允许访问外网。</p>
<p>举几个经典的应用场景：</p>
<ul>
<li>开发人员在家办公，需要连接公司内网，进服务器 shell 调试 / 部署；</li>
<li>开发人员联调时，需要给外网提供部署在本地的 web 服务；</li>
<li>出差过程中，需要连接公司内网，登录内部系统审批流程；</li>
<li>访问家庭 NAS 服务器。</li>
</ul>
<p>本文以服务端 centos7，客户端 windows 为例进行演示说明。</p>
<h1 id="一下载最新版本的-frp-到服务器">一、下载最新版本的 frp 到服务器</h1>
<p>下载页面：<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener noreffer">https://github.com/fatedier/frp/releases</a></p>
<p>根据自己的服务器架构，选择对应发行版本的文件下载。一般都是 x86 架构，下 linux_amd64.tar.gz 结尾的版本就可以。</p>
<p>当前最新版本是：0.34.3。</p>
<p>下载到 /root 目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /root <span class="o">&amp;&amp;</span> wget https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz
</code></pre></div><p>解压到 /usr/local 下，重命名文件夹为 frp：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">tar -zxvf frp_0.34.3_linux_amd64.tar.gz --directory<span class="o">=</span>/usr/local/ <span class="o">&amp;&amp;</span> mv frp_0.34.3_linux_amd64 frp
</code></pre></div><h1 id="二配置-frp-systemd-服务">二、配置 frp systemd 服务</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">#创建systemd服务文件</span>
vim /usr/lib/systemd/system/frp.service
 
<span class="c1">#写入以下内容，退出并保存</span>
<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>The nginx HTTP and reverse proxy server
<span class="nv">After</span><span class="o">=</span>network.target remote-fs.target nss-lookup.target
 
<span class="o">[</span>Service<span class="o">]</span>
<span class="nv">Type</span><span class="o">=</span>simple
<span class="nv">ExecStart</span><span class="o">=</span>/usr/local/frp/frps -c /usr/local/frp/frps.ini
<span class="nv">KillSignal</span><span class="o">=</span>SIGQUIT
<span class="nv">TimeoutStopSec</span><span class="o">=</span><span class="m">5</span>
<span class="nv">KillMode</span><span class="o">=</span>process
<span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>
<span class="nv">StandardOutput</span><span class="o">=</span>syslog
<span class="nv">StandardError</span><span class="o">=</span>inherit
 
<span class="o">[</span>Install<span class="o">]</span>
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div><p>重载配置文件，使之立即生效。</p>
<pre tabindex="0"><code>systemctl daemon-reload
</code></pre><p>systemctl 命令：</p>
<pre tabindex="0"><code>systemctl start frp #启动
systemctl stop frp #关闭
systemctl restart frp #重启
systemctl status frp #当前状态
systemctl enable frp #开机自启动
systemctl disable frp #取消开机自启动
</code></pre><h1 id="三修改-frp-服务端配置">三、修改 frp 服务端配置</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="c1">#修改frp服务端配置文件</span>
<span class="na">vim /usr/local/frp/frps.ini</span>
 
<span class="c1">#按照以下内容配置，保存并退出</span>
<span class="k">[common]</span>
<span class="na">bind_port</span> <span class="o">=</span> <span class="s">7000 #frp服务端端口</span>
<span class="na">vhost_http_port</span> <span class="o">=</span> <span class="s">8080 #http访问端口</span>
 
<span class="na">[web] #[]中的内容可以自己随便起，但不允许重复，只是起备注的功能而已。</span>
<span class="na">type</span> <span class="o">=</span> <span class="s">http #服务类型，可以设为http,https</span>
<span class="na">custom_domains</span> <span class="o">=</span> <span class="s">xxx.keyboardman.fun #公网域名，记得域名的A记录要解析到外网主机的IP。</span>
<span class="na">auth_token</span> <span class="o">=</span> <span class="s">123456789</span>
 
<span class="na">[ssh] #监听6000端口，外网SSH连接内网机器时，填写的IP即为frp服务端的IP和此处设定的6000端口。</span>
<span class="na">listen_port</span> <span class="o">=</span> <span class="s">6000</span>
<span class="na">auth_token</span> <span class="o">=</span> <span class="s">123456789</span>
 
<span class="na">[tcp] #监听10889端口，转发消息给客户端。</span>
<span class="na">listen_port</span> <span class="o">=</span> <span class="s">10889</span>
<span class="na">auth_token</span> <span class="o">=</span> <span class="s">123456789</span>
</code></pre></div><p>修改完 frp 服务端的配置文件后，需要检查服务器端口是否开放，上面的配置文件用到了 6000/7000/8080/10089 这 4 个端口。</p>
<p>重启 frp 服务端</p>
<pre tabindex="0"><code>systemctl restart frp
</code></pre><p>web 配置项用于向外网提供本地 web 服务、ssh 配置项用于连接本地虚拟机的 shell、tcp 配置项用于转发 10889 端口消息给本机。</p>
<p>需要注意的是，以上配置中，web/ssh/tcp 的字眼并非是标准语法，而是我起的一个备注而已。</p>
<h1 id="四下载最新版本的-frp-到本机">四、下载最新版本的 frp 到本机</h1>
<p>同样的，在 Github 的 release 页面下载对应版本的 frp：<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener noreffer">https://github.com/fatedier/frp/releases</a></p>
<p>本机是 windows，因此下载 windows_amd64.zip 版本即可。</p>
<p>下载地址：<a href="https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_windows_amd64.zip" target="_blank" rel="noopener noreffer">https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_windows_amd64.zip</a></p>
<h1 id="五配置客户端参数">五、配置客户端参数</h1>
<p>解压后进入目录，修改 frpc.ini 为如下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[common]</span>
<span class="na">server_addr</span> <span class="o">=</span> <span class="s">xx.xx.xx.xx #部署frp服务端的IP地址</span>
<span class="na">server_port</span> <span class="o">=</span> <span class="s">7000 #frp服务端的端口</span>
<span class="na">privilege_token</span> <span class="o">=</span> <span class="s">123456789 #验证token/密码</span>
 
<span class="k">[web]</span>
<span class="na">type</span> <span class="o">=</span> <span class="s">http</span>
<span class="na">local_ip</span> <span class="o">=</span> <span class="s">127.0.0.1</span>
<span class="na">local_port</span> <span class="o">=</span> <span class="s">5500 #web服务本地端口</span>
<span class="na">remote_port</span> <span class="o">=</span> <span class="s">8080 #frp服务端HTTP端口</span>
<span class="na">custom_domains</span> <span class="o">=</span> <span class="s">xxx.keyboardman.fun #反代域名</span>
 
<span class="c1">#将远程6000端口的tcp流量转发到本地的22端口</span>
<span class="k">[ssh]</span>
<span class="na">type</span> <span class="o">=</span> <span class="s">tcp</span>
<span class="na">local_ip</span> <span class="o">=</span> <span class="s">127.0.0.1</span>
<span class="na">local_port</span> <span class="o">=</span> <span class="s">22</span>
<span class="na">remote_port</span> <span class="o">=</span> <span class="s">6000</span>
 
<span class="c1">#将远程10889端口的tcp流量转发到本地的10889端口</span>
<span class="k">[tcp]</span>
<span class="na">type</span> <span class="o">=</span> <span class="s">tcp</span>
<span class="na">local_ip</span> <span class="o">=</span> <span class="s">127.0.0.1</span>
<span class="na">local_port</span> <span class="o">=</span> <span class="s">10889</span>
<span class="na">remote_port</span> <span class="o">=</span> <span class="s">10889</span>
</code></pre></div><p>此处的 web 项配置意为：frp 服务端会把访问 xxx.keyboardman.fun:8080 端口的请求代理至本地的 5500 端口。</p>
<p>ssh 项：将服务端 6000 端口的 tcp 流量转发至本地的 22 端口</p>
<p>tcp 项：将服务端 10889 端口的 tcp 流量转发至本地的 10889 端口</p>
<h1 id="六运行本机上运行-frp-客户端并测试效果">六、运行本机上运行 frp 客户端并测试效果</h1>
<p>打开 cmd，cd 到 frp 的目录下，frpc.exe 运行客户端</p>
<p></p>
<h2 id="1web-服务访问测试">1）web 服务访问测试</h2>
<p>访问 <a href="http://xxx.keyboardman.fun:8080" target="_blank" rel="noopener noreffer">http://xxx.keyboardman.fun:8080</a>，frp 服务端会将请求代理至本地的 5500 端口。</p>
<p></p>
<h2 id="2socket-消息测试">2）socket 消息测试</h2>
<p></p>
<p>SSH 测试就不演示了，在本机上有搭建 VMware，使用 nat 转发即可把本机的 22 端口 tcp 流量转发到目标虚拟机的 22 端口去，也就是远程 SSH 连接公司内网的应用场景了。</p>
<p>远程连接时，IP 填 frp 服务端所在的 IP，端口填 6000，可以回头看一下上文 frp 服务端的配置，其中 ssh 项的监听端口我选择的就是 6000。</p>
<h1 id="ref">REF</h1>
<p><a href="https://zhuanlan.zhihu.com/p/129076009" target="_blank" rel="noopener noreffer">https://zhuanlan.zhihu.com/p/129076009</a></p>]]></description>
</item><item>
    <title>如何使用 apache benchmark 对 API 进行压力测试</title>
    <link>https://sugarless.cn/posts/how-to-stress-test-the-api-using-apache-benchmark.html</link>
    <pubDate>Sat, 13 Jun 2020 00:00:00 &#43;0000</pubDate><author>
        <name>無糖</name>
    </author><guid>https://sugarless.cn/posts/how-to-stress-test-the-api-using-apache-benchmark.html</guid>
    <description><![CDATA[<p>在开发 API 完成后，测试的环节中免不了要进行压力测试。postman 的 runner 只支持串行化测试，不支持并发。jmeter 需要在本机上安装 JDK，且需要配置好 JAVA 环境变量，安装略显复杂，软件界面对小白并不友好，非开箱即用的工具。权衡之后，我个人推荐任何对压力测试毫无经验的人优先选择使用 Linux 环境下的 ab（apache benchmark）压测工具进行压力测试。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 安装 ab</span>
yum -y install httpd-tools

<span class="c1"># 显示可选的参数列表及说明</span>
ab -help
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 测试 </span>
<span class="c1"># c：并发数量</span>
<span class="c1"># n：总计请求数量</span>
ab -c <span class="m">100</span> -n <span class="m">10000</span> https://yourdomain.com/getUserInfo?id<span class="o">=</span>36<span class="p">&amp;</span><span class="nv">token</span><span class="o">=</span>6vPgUT0gG1RyzBRKxYsSNBgwFwM1mQLz
</code></pre></div><p>耐心等待测试完毕，以下是测试报告</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">Server Software: nginx
Server Hostname: yourdomain.com
Server Port: <span class="m">443</span>
SSL/TLS Protocol: TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128
 
Document Path: getUserInfo?id<span class="o">=</span>36<span class="p">&amp;</span><span class="nv">token</span><span class="o">=</span>6vPgUT0gG1RyzBRKxYsSNBgwFwM1mQLz
Document Length: <span class="m">41</span> bytes
 
Concurrency Level: <span class="m">200</span>
Time taken <span class="k">for</span> tests: 187.546 seconds
Complete requests: <span class="m">30000</span>
Failed requests: <span class="m">53</span>
<span class="o">(</span>Connect: 0, Receive: 0, Length: 53, Exceptions: 0<span class="o">)</span>
Write errors: <span class="m">0</span>
Non-2xx responses: <span class="m">47</span>
Total transferred: <span class="m">11695535</span> bytes
HTML transferred: <span class="m">1235123</span> bytes
Requests per second: 159.96 <span class="o">[</span><span class="c1">#/sec] (mean)</span>
Time per request: 1250.304 <span class="o">[</span>ms<span class="o">]</span> <span class="o">(</span>mean<span class="o">)</span>
Time per request: 6.252 <span class="o">[</span>ms<span class="o">]</span> <span class="o">(</span>mean, across all concurrent requests<span class="o">)</span>
Transfer rate: 60.90 <span class="o">[</span>Kbytes/sec<span class="o">]</span> received
 
Connection Times <span class="o">(</span>ms<span class="o">)</span>
min mean<span class="o">[</span>+/-sd<span class="o">]</span> median max
Connect: <span class="m">0</span> <span class="m">420</span> 1078.0 <span class="m">286</span> <span class="m">63684</span>
Processing: <span class="m">50</span> <span class="m">640</span> 996.0 <span class="m">609</span> <span class="m">69848</span>
Waiting: <span class="m">50</span> <span class="m">625</span> 248.5 <span class="m">608</span> <span class="m">1796</span>
Total: <span class="m">217</span> <span class="m">1060</span> 1452.9 <span class="m">951</span> <span class="m">69848</span>
 
Percentage of the requests served within a certain <span class="nb">time</span> <span class="o">(</span>ms<span class="o">)</span>
50% <span class="m">951</span> <span class="c1"># 50%的请求在951ms内返回</span>
66% <span class="m">1074</span>
75% <span class="m">1152</span>
80% <span class="m">1205</span>
90% <span class="m">1391</span> <span class="c1"># 90%的请求在1391ms内返回</span>
95% <span class="m">1660</span>
98% <span class="m">2043</span>
99% <span class="m">2928</span> <span class="c1"># 99%的请求在2928ms内返回</span>
100% <span class="m">69848</span> <span class="o">(</span>longest request<span class="o">)</span>
</code></pre></div><p>比较重要的也就是最后这部分的 percent line 了，jmeter 只有 90%、95%、99% 这三个量级，ab 从 50% 到 100% 都有。</p>]]></description>
</item></channel>
</rss>
